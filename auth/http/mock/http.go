// Code generated by MockGen. DO NOT EDIT.
// Source: ./auth/http/http.go

// Package mock_http is a generated GoMock package.
package mock_http

import (
	context "context"
	reflect "reflect"

	http "github.com/buyco/go-msc-sdk/v2/auth/http"
	gomock "github.com/golang/mock/gomock"
)

// MockHTTPClient is a mock of HTTPClient interface.
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient.
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance.
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// NewRequest mocks base method.
func (m *MockHTTPClient) NewRequest() http.HTTPRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRequest")
	ret0, _ := ret[0].(http.HTTPRequest)
	return ret0
}

// NewRequest indicates an expected call of NewRequest.
func (mr *MockHTTPClientMockRecorder) NewRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRequest", reflect.TypeOf((*MockHTTPClient)(nil).NewRequest))
}

// MockHTTPRequest is a mock of HTTPRequest interface.
type MockHTTPRequest struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPRequestMockRecorder
}

// MockHTTPRequestMockRecorder is the mock recorder for MockHTTPRequest.
type MockHTTPRequestMockRecorder struct {
	mock *MockHTTPRequest
}

// NewMockHTTPRequest creates a new mock instance.
func NewMockHTTPRequest(ctrl *gomock.Controller) *MockHTTPRequest {
	mock := &MockHTTPRequest{ctrl: ctrl}
	mock.recorder = &MockHTTPRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPRequest) EXPECT() *MockHTTPRequestMockRecorder {
	return m.recorder
}

// DisableTrace mocks base method.
func (m *MockHTTPRequest) DisableTrace() http.HTTPRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableTrace")
	ret0, _ := ret[0].(http.HTTPRequest)
	return ret0
}

// DisableTrace indicates an expected call of DisableTrace.
func (mr *MockHTTPRequestMockRecorder) DisableTrace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableTrace", reflect.TypeOf((*MockHTTPRequest)(nil).DisableTrace))
}

// EnableTrace mocks base method.
func (m *MockHTTPRequest) EnableTrace() http.HTTPRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableTrace")
	ret0, _ := ret[0].(http.HTTPRequest)
	return ret0
}

// EnableTrace indicates an expected call of EnableTrace.
func (mr *MockHTTPRequestMockRecorder) EnableTrace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableTrace", reflect.TypeOf((*MockHTTPRequest)(nil).EnableTrace))
}

// Get mocks base method.
func (m *MockHTTPRequest) Get(url string) (http.HTTPResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", url)
	ret0, _ := ret[0].(http.HTTPResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockHTTPRequestMockRecorder) Get(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHTTPRequest)(nil).Get), url)
}

// Post mocks base method.
func (m *MockHTTPRequest) Post(url string) (http.HTTPResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", url)
	ret0, _ := ret[0].(http.HTTPResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockHTTPRequestMockRecorder) Post(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockHTTPRequest)(nil).Post), url)
}

// Put mocks base method.
func (m *MockHTTPRequest) Put(url string) (http.HTTPResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", url)
	ret0, _ := ret[0].(http.HTTPResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockHTTPRequestMockRecorder) Put(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockHTTPRequest)(nil).Put), url)
}

// SetContext mocks base method.
func (m *MockHTTPRequest) SetContext(ctx context.Context) http.HTTPRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetContext", ctx)
	ret0, _ := ret[0].(http.HTTPRequest)
	return ret0
}

// SetContext indicates an expected call of SetContext.
func (mr *MockHTTPRequestMockRecorder) SetContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContext", reflect.TypeOf((*MockHTTPRequest)(nil).SetContext), ctx)
}

// SetError mocks base method.
func (m *MockHTTPRequest) SetError(error interface{}) http.HTTPRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetError", error)
	ret0, _ := ret[0].(http.HTTPRequest)
	return ret0
}

// SetError indicates an expected call of SetError.
func (mr *MockHTTPRequestMockRecorder) SetError(error interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetError", reflect.TypeOf((*MockHTTPRequest)(nil).SetError), error)
}

// SetFormData mocks base method.
func (m *MockHTTPRequest) SetFormData(data map[string]string) http.HTTPRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFormData", data)
	ret0, _ := ret[0].(http.HTTPRequest)
	return ret0
}

// SetFormData indicates an expected call of SetFormData.
func (mr *MockHTTPRequestMockRecorder) SetFormData(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFormData", reflect.TypeOf((*MockHTTPRequest)(nil).SetFormData), data)
}

// SetHeaders mocks base method.
func (m *MockHTTPRequest) SetHeaders(hdrs map[string]string) http.HTTPRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeaders", hdrs)
	ret0, _ := ret[0].(http.HTTPRequest)
	return ret0
}

// SetHeaders indicates an expected call of SetHeaders.
func (mr *MockHTTPRequestMockRecorder) SetHeaders(hdrs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeaders", reflect.TypeOf((*MockHTTPRequest)(nil).SetHeaders), hdrs)
}

// SetResult mocks base method.
func (m *MockHTTPRequest) SetResult(result interface{}) http.HTTPRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetResult", result)
	ret0, _ := ret[0].(http.HTTPRequest)
	return ret0
}

// SetResult indicates an expected call of SetResult.
func (mr *MockHTTPRequestMockRecorder) SetResult(result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetResult", reflect.TypeOf((*MockHTTPRequest)(nil).SetResult), result)
}

// MockHTTPResponse is a mock of HTTPResponse interface.
type MockHTTPResponse struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPResponseMockRecorder
}

// MockHTTPResponseMockRecorder is the mock recorder for MockHTTPResponse.
type MockHTTPResponseMockRecorder struct {
	mock *MockHTTPResponse
}

// NewMockHTTPResponse creates a new mock instance.
func NewMockHTTPResponse(ctrl *gomock.Controller) *MockHTTPResponse {
	mock := &MockHTTPResponse{ctrl: ctrl}
	mock.recorder = &MockHTTPResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPResponse) EXPECT() *MockHTTPResponseMockRecorder {
	return m.recorder
}

// Bytes mocks base method.
func (m *MockHTTPResponse) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes.
func (mr *MockHTTPResponseMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockHTTPResponse)(nil).Bytes))
}

// Error mocks base method.
func (m *MockHTTPResponse) Error() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockHTTPResponseMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockHTTPResponse)(nil).Error))
}

// GetHeader mocks base method.
func (m *MockHTTPResponse) GetHeader(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeader", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHeader indicates an expected call of GetHeader.
func (mr *MockHTTPResponseMockRecorder) GetHeader(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeader", reflect.TypeOf((*MockHTTPResponse)(nil).GetHeader), key)
}

// GetHeaderValues mocks base method.
func (m *MockHTTPResponse) GetHeaderValues(key string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeaderValues", key)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetHeaderValues indicates an expected call of GetHeaderValues.
func (mr *MockHTTPResponseMockRecorder) GetHeaderValues(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaderValues", reflect.TypeOf((*MockHTTPResponse)(nil).GetHeaderValues), key)
}

// GetStatus mocks base method.
func (m *MockHTTPResponse) GetStatus() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockHTTPResponseMockRecorder) GetStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockHTTPResponse)(nil).GetStatus))
}

// GetStatusCode mocks base method.
func (m *MockHTTPResponse) GetStatusCode() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatusCode")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetStatusCode indicates an expected call of GetStatusCode.
func (mr *MockHTTPResponseMockRecorder) GetStatusCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatusCode", reflect.TypeOf((*MockHTTPResponse)(nil).GetStatusCode))
}

// IsError mocks base method.
func (m *MockHTTPResponse) IsError() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsError")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsError indicates an expected call of IsError.
func (mr *MockHTTPResponseMockRecorder) IsError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsError", reflect.TypeOf((*MockHTTPResponse)(nil).IsError))
}

// IsSuccess mocks base method.
func (m *MockHTTPResponse) IsSuccess() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSuccess")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSuccess indicates an expected call of IsSuccess.
func (mr *MockHTTPResponseMockRecorder) IsSuccess() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSuccess", reflect.TypeOf((*MockHTTPResponse)(nil).IsSuccess))
}

// Result mocks base method.
func (m *MockHTTPResponse) Result() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Result indicates an expected call of Result.
func (mr *MockHTTPResponseMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockHTTPResponse)(nil).Result))
}

// String mocks base method.
func (m *MockHTTPResponse) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockHTTPResponseMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockHTTPResponse)(nil).String))
}

// ToBytes mocks base method.
func (m *MockHTTPResponse) ToBytes() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToBytes")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToBytes indicates an expected call of ToBytes.
func (mr *MockHTTPResponseMockRecorder) ToBytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToBytes", reflect.TypeOf((*MockHTTPResponse)(nil).ToBytes))
}

// ToString mocks base method.
func (m *MockHTTPResponse) ToString() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToString")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToString indicates an expected call of ToString.
func (mr *MockHTTPResponseMockRecorder) ToString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToString", reflect.TypeOf((*MockHTTPResponse)(nil).ToString))
}

// UnmarshalJson mocks base method.
func (m *MockHTTPResponse) UnmarshalJson(v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalJson", v)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmarshalJson indicates an expected call of UnmarshalJson.
func (mr *MockHTTPResponseMockRecorder) UnmarshalJson(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalJson", reflect.TypeOf((*MockHTTPResponse)(nil).UnmarshalJson), v)
}
