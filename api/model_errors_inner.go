/*
DCSA Track and Trace API

API specifications for the Track and Trace interface standard issued by DCSA.org.

API version: 1.2.0
Contact: info@dcsa.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// ErrorsInner struct for ErrorsInner
type ErrorsInner struct {
	// High level error message.
	Reason string `json:"reason"`
	// Detailed error message.
	Message string `json:"message"`
}

// NewErrorsInner instantiates a new ErrorsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorsInner(reason string, message string) *ErrorsInner {
	this := ErrorsInner{}
	this.Reason = reason
	this.Message = message
	return &this
}

// NewErrorsInnerWithDefaults instantiates a new ErrorsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorsInnerWithDefaults() *ErrorsInner {
	this := ErrorsInner{}
	return &this
}

// GetReason returns the Reason field value
func (o *ErrorsInner) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *ErrorsInner) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *ErrorsInner) SetReason(v string) {
	o.Reason = v
}

// GetMessage returns the Message field value
func (o *ErrorsInner) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ErrorsInner) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ErrorsInner) SetMessage(v string) {
	o.Message = v
}

func (o ErrorsInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["reason"] = o.Reason
	}
	if true {
		toSerialize["message"] = o.Message
	}
	return json.Marshal(toSerialize)
}

type NullableErrorsInner struct {
	value *ErrorsInner
	isSet bool
}

func (v NullableErrorsInner) Get() *ErrorsInner {
	return v.value
}

func (v *NullableErrorsInner) Set(val *ErrorsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorsInner(val *ErrorsInner) *NullableErrorsInner {
	return &NullableErrorsInner{value: val, isSet: true}
}

func (v NullableErrorsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
