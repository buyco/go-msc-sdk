/*
DCSA OpenAPI specification for Track & Trace

Provides equipment actual milestones along with Estimated Time of Arrival following DCSA standards

API version: 2.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the BaseShipmentEventAllOf3 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseShipmentEventAllOf3{}

// BaseShipmentEventAllOf3 struct for BaseShipmentEventAllOf3
type BaseShipmentEventAllOf3 struct {
	// The id of the object defined by the documentTypeCode.
	DocumentID *string `json:"documentID,omitempty"`
}

// NewBaseShipmentEventAllOf3 instantiates a new BaseShipmentEventAllOf3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseShipmentEventAllOf3() *BaseShipmentEventAllOf3 {
	this := BaseShipmentEventAllOf3{}
	return &this
}

// NewBaseShipmentEventAllOf3WithDefaults instantiates a new BaseShipmentEventAllOf3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseShipmentEventAllOf3WithDefaults() *BaseShipmentEventAllOf3 {
	this := BaseShipmentEventAllOf3{}
	return &this
}

// GetDocumentID returns the DocumentID field value if set, zero value otherwise.
func (o *BaseShipmentEventAllOf3) GetDocumentID() string {
	if o == nil || IsNil(o.DocumentID) {
		var ret string
		return ret
	}
	return *o.DocumentID
}

// GetDocumentIDOk returns a tuple with the DocumentID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseShipmentEventAllOf3) GetDocumentIDOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentID) {
		return nil, false
	}
	return o.DocumentID, true
}

// HasDocumentID returns a boolean if a field has been set.
func (o *BaseShipmentEventAllOf3) HasDocumentID() bool {
	if o != nil && !IsNil(o.DocumentID) {
		return true
	}

	return false
}

// SetDocumentID gets a reference to the given string and assigns it to the DocumentID field.
func (o *BaseShipmentEventAllOf3) SetDocumentID(v string) {
	o.DocumentID = &v
}

func (o BaseShipmentEventAllOf3) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseShipmentEventAllOf3) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DocumentID) {
		toSerialize["documentID"] = o.DocumentID
	}
	return toSerialize, nil
}

type NullableBaseShipmentEventAllOf3 struct {
	value *BaseShipmentEventAllOf3
	isSet bool
}

func (v NullableBaseShipmentEventAllOf3) Get() *BaseShipmentEventAllOf3 {
	return v.value
}

func (v *NullableBaseShipmentEventAllOf3) Set(val *BaseShipmentEventAllOf3) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseShipmentEventAllOf3) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseShipmentEventAllOf3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseShipmentEventAllOf3(val *BaseShipmentEventAllOf3) *NullableBaseShipmentEventAllOf3 {
	return &NullableBaseShipmentEventAllOf3{value: val, isSet: true}
}

func (v NullableBaseShipmentEventAllOf3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseShipmentEventAllOf3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
