/*
DCSA OpenAPI specification for Track & Trace

Provides equipment actual milestones along with Estimated Time of Arrival following DCSA standards

API version: 2.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the BaseTransportEventAllOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseTransportEventAllOf1{}

// BaseTransportEventAllOf1 struct for BaseTransportEventAllOf1
type BaseTransportEventAllOf1 struct {
	// Code for the event classifier can be - ACT (Actual) - PLN (Planned) - EST (Estimated)
	EventClassifierCode *string `json:"eventClassifierCode,omitempty"`
}

// NewBaseTransportEventAllOf1 instantiates a new BaseTransportEventAllOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseTransportEventAllOf1() *BaseTransportEventAllOf1 {
	this := BaseTransportEventAllOf1{}
	return &this
}

// NewBaseTransportEventAllOf1WithDefaults instantiates a new BaseTransportEventAllOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseTransportEventAllOf1WithDefaults() *BaseTransportEventAllOf1 {
	this := BaseTransportEventAllOf1{}
	return &this
}

// GetEventClassifierCode returns the EventClassifierCode field value if set, zero value otherwise.
func (o *BaseTransportEventAllOf1) GetEventClassifierCode() string {
	if o == nil || IsNil(o.EventClassifierCode) {
		var ret string
		return ret
	}
	return *o.EventClassifierCode
}

// GetEventClassifierCodeOk returns a tuple with the EventClassifierCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseTransportEventAllOf1) GetEventClassifierCodeOk() (*string, bool) {
	if o == nil || IsNil(o.EventClassifierCode) {
		return nil, false
	}
	return o.EventClassifierCode, true
}

// HasEventClassifierCode returns a boolean if a field has been set.
func (o *BaseTransportEventAllOf1) HasEventClassifierCode() bool {
	if o != nil && !IsNil(o.EventClassifierCode) {
		return true
	}

	return false
}

// SetEventClassifierCode gets a reference to the given string and assigns it to the EventClassifierCode field.
func (o *BaseTransportEventAllOf1) SetEventClassifierCode(v string) {
	o.EventClassifierCode = &v
}

func (o BaseTransportEventAllOf1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseTransportEventAllOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventClassifierCode) {
		toSerialize["eventClassifierCode"] = o.EventClassifierCode
	}
	return toSerialize, nil
}

type NullableBaseTransportEventAllOf1 struct {
	value *BaseTransportEventAllOf1
	isSet bool
}

func (v NullableBaseTransportEventAllOf1) Get() *BaseTransportEventAllOf1 {
	return v.value
}

func (v *NullableBaseTransportEventAllOf1) Set(val *BaseTransportEventAllOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseTransportEventAllOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseTransportEventAllOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseTransportEventAllOf1(val *BaseTransportEventAllOf1) *NullableBaseTransportEventAllOf1 {
	return &NullableBaseTransportEventAllOf1{value: val, isSet: true}
}

func (v NullableBaseTransportEventAllOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseTransportEventAllOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
