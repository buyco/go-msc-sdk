/*
DCSA OpenAPI specification for Track & Trace

Provides equipment actual milestones along with Estimated Time of Arrival following DCSA standards

API version: 2.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the TransportCallAllOf13 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransportCallAllOf13{}

// TransportCallAllOf13 struct for TransportCallAllOf13
type TransportCallAllOf13 struct {
	Location *TransportCallAllOf13Location `json:"location,omitempty"`
}

// NewTransportCallAllOf13 instantiates a new TransportCallAllOf13 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransportCallAllOf13() *TransportCallAllOf13 {
	this := TransportCallAllOf13{}
	return &this
}

// NewTransportCallAllOf13WithDefaults instantiates a new TransportCallAllOf13 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransportCallAllOf13WithDefaults() *TransportCallAllOf13 {
	this := TransportCallAllOf13{}
	return &this
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *TransportCallAllOf13) GetLocation() TransportCallAllOf13Location {
	if o == nil || IsNil(o.Location) {
		var ret TransportCallAllOf13Location
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportCallAllOf13) GetLocationOk() (*TransportCallAllOf13Location, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *TransportCallAllOf13) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given TransportCallAllOf13Location and assigns it to the Location field.
func (o *TransportCallAllOf13) SetLocation(v TransportCallAllOf13Location) {
	o.Location = &v
}

func (o TransportCallAllOf13) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransportCallAllOf13) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	return toSerialize, nil
}

type NullableTransportCallAllOf13 struct {
	value *TransportCallAllOf13
	isSet bool
}

func (v NullableTransportCallAllOf13) Get() *TransportCallAllOf13 {
	return v.value
}

func (v *NullableTransportCallAllOf13) Set(val *TransportCallAllOf13) {
	v.value = val
	v.isSet = true
}

func (v NullableTransportCallAllOf13) IsSet() bool {
	return v.isSet
}

func (v *NullableTransportCallAllOf13) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransportCallAllOf13(val *TransportCallAllOf13) *NullableTransportCallAllOf13 {
	return &NullableTransportCallAllOf13{value: val, isSet: true}
}

func (v NullableTransportCallAllOf13) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransportCallAllOf13) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
