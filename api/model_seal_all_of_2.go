/*
DCSA OpenAPI specification for Track & Trace

Provides equipment actual milestones along with Estimated Time of Arrival following DCSA standards

API version: 2.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the SealAllOf2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SealAllOf2{}

// SealAllOf2 struct for SealAllOf2
type SealAllOf2 struct {
	SealType *SealType `json:"sealType,omitempty"`
}

// NewSealAllOf2 instantiates a new SealAllOf2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSealAllOf2() *SealAllOf2 {
	this := SealAllOf2{}
	return &this
}

// NewSealAllOf2WithDefaults instantiates a new SealAllOf2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSealAllOf2WithDefaults() *SealAllOf2 {
	this := SealAllOf2{}
	return &this
}

// GetSealType returns the SealType field value if set, zero value otherwise.
func (o *SealAllOf2) GetSealType() SealType {
	if o == nil || IsNil(o.SealType) {
		var ret SealType
		return ret
	}
	return *o.SealType
}

// GetSealTypeOk returns a tuple with the SealType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SealAllOf2) GetSealTypeOk() (*SealType, bool) {
	if o == nil || IsNil(o.SealType) {
		return nil, false
	}
	return o.SealType, true
}

// HasSealType returns a boolean if a field has been set.
func (o *SealAllOf2) HasSealType() bool {
	if o != nil && !IsNil(o.SealType) {
		return true
	}

	return false
}

// SetSealType gets a reference to the given SealType and assigns it to the SealType field.
func (o *SealAllOf2) SetSealType(v SealType) {
	o.SealType = &v
}

func (o SealAllOf2) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SealAllOf2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SealType) {
		toSerialize["sealType"] = o.SealType
	}
	return toSerialize, nil
}

type NullableSealAllOf2 struct {
	value *SealAllOf2
	isSet bool
}

func (v NullableSealAllOf2) Get() *SealAllOf2 {
	return v.value
}

func (v *NullableSealAllOf2) Set(val *SealAllOf2) {
	v.value = val
	v.isSet = true
}

func (v NullableSealAllOf2) IsSet() bool {
	return v.isSet
}

func (v *NullableSealAllOf2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSealAllOf2(val *SealAllOf2) *NullableSealAllOf2 {
	return &NullableSealAllOf2{value: val, isSet: true}
}

func (v NullableSealAllOf2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSealAllOf2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
