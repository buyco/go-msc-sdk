/*
DCSA OpenAPI specification for Track & Trace

Provides equipment actual milestones along with Estimated Time of Arrival following DCSA standards

API version: 2.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the BaseTransportEventAllOf9 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseTransportEventAllOf9{}

// BaseTransportEventAllOf9 struct for BaseTransportEventAllOf9
type BaseTransportEventAllOf9 struct {
	// Unique identifier for Event Type Code, for transport events this is either - ARRI (Arrival) - DEPA (Departure)  Deprecated - use transportEventTypeCode instead
	// Deprecated
	EventTypeCode *string `json:"eventTypeCode,omitempty"`
}

// NewBaseTransportEventAllOf9 instantiates a new BaseTransportEventAllOf9 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseTransportEventAllOf9() *BaseTransportEventAllOf9 {
	this := BaseTransportEventAllOf9{}
	return &this
}

// NewBaseTransportEventAllOf9WithDefaults instantiates a new BaseTransportEventAllOf9 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseTransportEventAllOf9WithDefaults() *BaseTransportEventAllOf9 {
	this := BaseTransportEventAllOf9{}
	return &this
}

// GetEventTypeCode returns the EventTypeCode field value if set, zero value otherwise.
// Deprecated
func (o *BaseTransportEventAllOf9) GetEventTypeCode() string {
	if o == nil || IsNil(o.EventTypeCode) {
		var ret string
		return ret
	}
	return *o.EventTypeCode
}

// GetEventTypeCodeOk returns a tuple with the EventTypeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *BaseTransportEventAllOf9) GetEventTypeCodeOk() (*string, bool) {
	if o == nil || IsNil(o.EventTypeCode) {
		return nil, false
	}
	return o.EventTypeCode, true
}

// HasEventTypeCode returns a boolean if a field has been set.
func (o *BaseTransportEventAllOf9) HasEventTypeCode() bool {
	if o != nil && !IsNil(o.EventTypeCode) {
		return true
	}

	return false
}

// SetEventTypeCode gets a reference to the given string and assigns it to the EventTypeCode field.
// Deprecated
func (o *BaseTransportEventAllOf9) SetEventTypeCode(v string) {
	o.EventTypeCode = &v
}

func (o BaseTransportEventAllOf9) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseTransportEventAllOf9) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventTypeCode) {
		toSerialize["eventTypeCode"] = o.EventTypeCode
	}
	return toSerialize, nil
}

type NullableBaseTransportEventAllOf9 struct {
	value *BaseTransportEventAllOf9
	isSet bool
}

func (v NullableBaseTransportEventAllOf9) Get() *BaseTransportEventAllOf9 {
	return v.value
}

func (v *NullableBaseTransportEventAllOf9) Set(val *BaseTransportEventAllOf9) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseTransportEventAllOf9) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseTransportEventAllOf9) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseTransportEventAllOf9(val *BaseTransportEventAllOf9) *NullableBaseTransportEventAllOf9 {
	return &NullableBaseTransportEventAllOf9{value: val, isSet: true}
}

func (v NullableBaseTransportEventAllOf9) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseTransportEventAllOf9) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
