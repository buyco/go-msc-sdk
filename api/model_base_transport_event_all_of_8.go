/*
DCSA OpenAPI specification for Track & Trace

Provides equipment actual milestones along with Estimated Time of Arrival following DCSA standards

API version: 2.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the BaseTransportEventAllOf8 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseTransportEventAllOf8{}

// BaseTransportEventAllOf8 struct for BaseTransportEventAllOf8
type BaseTransportEventAllOf8 struct {
	// Deprecated - Unique identifier for Event Type Code. This has been replaced by Specialized eventTypeCodes: shipmentEventTypeCode, transportEventTypeCode, equipmentEventTypeCode and opertaionsEventType
	// Deprecated
	EventTypeCode *string `json:"eventTypeCode,omitempty"`
}

// NewBaseTransportEventAllOf8 instantiates a new BaseTransportEventAllOf8 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseTransportEventAllOf8() *BaseTransportEventAllOf8 {
	this := BaseTransportEventAllOf8{}
	return &this
}

// NewBaseTransportEventAllOf8WithDefaults instantiates a new BaseTransportEventAllOf8 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseTransportEventAllOf8WithDefaults() *BaseTransportEventAllOf8 {
	this := BaseTransportEventAllOf8{}
	return &this
}

// GetEventTypeCode returns the EventTypeCode field value if set, zero value otherwise.
// Deprecated
func (o *BaseTransportEventAllOf8) GetEventTypeCode() string {
	if o == nil || IsNil(o.EventTypeCode) {
		var ret string
		return ret
	}
	return *o.EventTypeCode
}

// GetEventTypeCodeOk returns a tuple with the EventTypeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *BaseTransportEventAllOf8) GetEventTypeCodeOk() (*string, bool) {
	if o == nil || IsNil(o.EventTypeCode) {
		return nil, false
	}
	return o.EventTypeCode, true
}

// HasEventTypeCode returns a boolean if a field has been set.
func (o *BaseTransportEventAllOf8) HasEventTypeCode() bool {
	if o != nil && !IsNil(o.EventTypeCode) {
		return true
	}

	return false
}

// SetEventTypeCode gets a reference to the given string and assigns it to the EventTypeCode field.
// Deprecated
func (o *BaseTransportEventAllOf8) SetEventTypeCode(v string) {
	o.EventTypeCode = &v
}

func (o BaseTransportEventAllOf8) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseTransportEventAllOf8) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventTypeCode) {
		toSerialize["eventTypeCode"] = o.EventTypeCode
	}
	return toSerialize, nil
}

type NullableBaseTransportEventAllOf8 struct {
	value *BaseTransportEventAllOf8
	isSet bool
}

func (v NullableBaseTransportEventAllOf8) Get() *BaseTransportEventAllOf8 {
	return v.value
}

func (v *NullableBaseTransportEventAllOf8) Set(val *BaseTransportEventAllOf8) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseTransportEventAllOf8) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseTransportEventAllOf8) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseTransportEventAllOf8(val *BaseTransportEventAllOf8) *NullableBaseTransportEventAllOf8 {
	return &NullableBaseTransportEventAllOf8{value: val, isSet: true}
}

func (v NullableBaseTransportEventAllOf8) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseTransportEventAllOf8) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
