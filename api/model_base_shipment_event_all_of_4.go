/*
DCSA OpenAPI specification for Track & Trace

Provides equipment actual milestones along with Estimated Time of Arrival following DCSA standards

API version: 2.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the BaseShipmentEventAllOf4 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseShipmentEventAllOf4{}

// BaseShipmentEventAllOf4 struct for BaseShipmentEventAllOf4
type BaseShipmentEventAllOf4 struct {
	DocumentTypeCode *DocumentTypeCode `json:"documentTypeCode,omitempty"`
}

// NewBaseShipmentEventAllOf4 instantiates a new BaseShipmentEventAllOf4 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseShipmentEventAllOf4() *BaseShipmentEventAllOf4 {
	this := BaseShipmentEventAllOf4{}
	return &this
}

// NewBaseShipmentEventAllOf4WithDefaults instantiates a new BaseShipmentEventAllOf4 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseShipmentEventAllOf4WithDefaults() *BaseShipmentEventAllOf4 {
	this := BaseShipmentEventAllOf4{}
	return &this
}

// GetDocumentTypeCode returns the DocumentTypeCode field value if set, zero value otherwise.
func (o *BaseShipmentEventAllOf4) GetDocumentTypeCode() DocumentTypeCode {
	if o == nil || IsNil(o.DocumentTypeCode) {
		var ret DocumentTypeCode
		return ret
	}
	return *o.DocumentTypeCode
}

// GetDocumentTypeCodeOk returns a tuple with the DocumentTypeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseShipmentEventAllOf4) GetDocumentTypeCodeOk() (*DocumentTypeCode, bool) {
	if o == nil || IsNil(o.DocumentTypeCode) {
		return nil, false
	}
	return o.DocumentTypeCode, true
}

// HasDocumentTypeCode returns a boolean if a field has been set.
func (o *BaseShipmentEventAllOf4) HasDocumentTypeCode() bool {
	if o != nil && !IsNil(o.DocumentTypeCode) {
		return true
	}

	return false
}

// SetDocumentTypeCode gets a reference to the given DocumentTypeCode and assigns it to the DocumentTypeCode field.
func (o *BaseShipmentEventAllOf4) SetDocumentTypeCode(v DocumentTypeCode) {
	o.DocumentTypeCode = &v
}

func (o BaseShipmentEventAllOf4) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseShipmentEventAllOf4) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DocumentTypeCode) {
		toSerialize["documentTypeCode"] = o.DocumentTypeCode
	}
	return toSerialize, nil
}

type NullableBaseShipmentEventAllOf4 struct {
	value *BaseShipmentEventAllOf4
	isSet bool
}

func (v NullableBaseShipmentEventAllOf4) Get() *BaseShipmentEventAllOf4 {
	return v.value
}

func (v *NullableBaseShipmentEventAllOf4) Set(val *BaseShipmentEventAllOf4) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseShipmentEventAllOf4) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseShipmentEventAllOf4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseShipmentEventAllOf4(val *BaseShipmentEventAllOf4) *NullableBaseShipmentEventAllOf4 {
	return &NullableBaseShipmentEventAllOf4{value: val, isSet: true}
}

func (v NullableBaseShipmentEventAllOf4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseShipmentEventAllOf4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
