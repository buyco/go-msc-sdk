/*
DCSA OpenAPI specification for Track & Trace

Provides equipment actual milestones along with Estimated Time of Arrival following DCSA standards

API version: 2.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the SubErrorsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubErrorsInner{}

// SubErrorsInner struct for SubErrorsInner
type SubErrorsInner struct {
	// High level error message.
	Reason string `json:"reason"`
	// Detailed error message.
	Message string `json:"message"`
}

// NewSubErrorsInner instantiates a new SubErrorsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubErrorsInner(reason string, message string) *SubErrorsInner {
	this := SubErrorsInner{}
	this.Reason = reason
	this.Message = message
	return &this
}

// NewSubErrorsInnerWithDefaults instantiates a new SubErrorsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubErrorsInnerWithDefaults() *SubErrorsInner {
	this := SubErrorsInner{}
	return &this
}

// GetReason returns the Reason field value
func (o *SubErrorsInner) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *SubErrorsInner) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *SubErrorsInner) SetReason(v string) {
	o.Reason = v
}

// GetMessage returns the Message field value
func (o *SubErrorsInner) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *SubErrorsInner) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *SubErrorsInner) SetMessage(v string) {
	o.Message = v
}

func (o SubErrorsInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubErrorsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["reason"] = o.Reason
	toSerialize["message"] = o.Message
	return toSerialize, nil
}

type NullableSubErrorsInner struct {
	value *SubErrorsInner
	isSet bool
}

func (v NullableSubErrorsInner) Get() *SubErrorsInner {
	return v.value
}

func (v *NullableSubErrorsInner) Set(val *SubErrorsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSubErrorsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSubErrorsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubErrorsInner(val *SubErrorsInner) *NullableSubErrorsInner {
	return &NullableSubErrorsInner{value: val, isSet: true}
}

func (v NullableSubErrorsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubErrorsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
