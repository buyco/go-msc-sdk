/*
DCSA OpenAPI specification for Track & Trace

Provides equipment actual milestones along with Estimated Time of Arrival following DCSA standards

API version: 2.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// checks if the BaseEventAllOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseEventAllOf1{}

// BaseEventAllOf1 struct for BaseEventAllOf1
type BaseEventAllOf1 struct {
	// The timestamp of when the event was created.  <b>NB</b>&#58; This field should be considered Metadata
	EventCreatedDateTime *time.Time `json:"eventCreatedDateTime,omitempty"`
}

// NewBaseEventAllOf1 instantiates a new BaseEventAllOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseEventAllOf1() *BaseEventAllOf1 {
	this := BaseEventAllOf1{}
	return &this
}

// NewBaseEventAllOf1WithDefaults instantiates a new BaseEventAllOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseEventAllOf1WithDefaults() *BaseEventAllOf1 {
	this := BaseEventAllOf1{}
	return &this
}

// GetEventCreatedDateTime returns the EventCreatedDateTime field value if set, zero value otherwise.
func (o *BaseEventAllOf1) GetEventCreatedDateTime() time.Time {
	if o == nil || IsNil(o.EventCreatedDateTime) {
		var ret time.Time
		return ret
	}
	return *o.EventCreatedDateTime
}

// GetEventCreatedDateTimeOk returns a tuple with the EventCreatedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseEventAllOf1) GetEventCreatedDateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EventCreatedDateTime) {
		return nil, false
	}
	return o.EventCreatedDateTime, true
}

// HasEventCreatedDateTime returns a boolean if a field has been set.
func (o *BaseEventAllOf1) HasEventCreatedDateTime() bool {
	if o != nil && !IsNil(o.EventCreatedDateTime) {
		return true
	}

	return false
}

// SetEventCreatedDateTime gets a reference to the given time.Time and assigns it to the EventCreatedDateTime field.
func (o *BaseEventAllOf1) SetEventCreatedDateTime(v time.Time) {
	o.EventCreatedDateTime = &v
}

func (o BaseEventAllOf1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseEventAllOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventCreatedDateTime) {
		toSerialize["eventCreatedDateTime"] = o.EventCreatedDateTime
	}
	return toSerialize, nil
}

type NullableBaseEventAllOf1 struct {
	value *BaseEventAllOf1
	isSet bool
}

func (v NullableBaseEventAllOf1) Get() *BaseEventAllOf1 {
	return v.value
}

func (v *NullableBaseEventAllOf1) Set(val *BaseEventAllOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseEventAllOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseEventAllOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseEventAllOf1(val *BaseEventAllOf1) *NullableBaseEventAllOf1 {
	return &NullableBaseEventAllOf1{value: val, isSet: true}
}

func (v NullableBaseEventAllOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseEventAllOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
