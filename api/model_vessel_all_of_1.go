/*
DCSA OpenAPI specification for Track & Trace

Provides equipment actual milestones along with Estimated Time of Arrival following DCSA standards

API version: 2.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the VesselAllOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VesselAllOf1{}

// VesselAllOf1 struct for VesselAllOf1
type VesselAllOf1 struct {
	// The name of the Vessel given by the Vessel Operator and registered with IMO.
	VesselName *string `json:"vesselName,omitempty"`
}

// NewVesselAllOf1 instantiates a new VesselAllOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVesselAllOf1() *VesselAllOf1 {
	this := VesselAllOf1{}
	return &this
}

// NewVesselAllOf1WithDefaults instantiates a new VesselAllOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVesselAllOf1WithDefaults() *VesselAllOf1 {
	this := VesselAllOf1{}
	return &this
}

// GetVesselName returns the VesselName field value if set, zero value otherwise.
func (o *VesselAllOf1) GetVesselName() string {
	if o == nil || IsNil(o.VesselName) {
		var ret string
		return ret
	}
	return *o.VesselName
}

// GetVesselNameOk returns a tuple with the VesselName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VesselAllOf1) GetVesselNameOk() (*string, bool) {
	if o == nil || IsNil(o.VesselName) {
		return nil, false
	}
	return o.VesselName, true
}

// HasVesselName returns a boolean if a field has been set.
func (o *VesselAllOf1) HasVesselName() bool {
	if o != nil && !IsNil(o.VesselName) {
		return true
	}

	return false
}

// SetVesselName gets a reference to the given string and assigns it to the VesselName field.
func (o *VesselAllOf1) SetVesselName(v string) {
	o.VesselName = &v
}

func (o VesselAllOf1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VesselAllOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VesselName) {
		toSerialize["vesselName"] = o.VesselName
	}
	return toSerialize, nil
}

type NullableVesselAllOf1 struct {
	value *VesselAllOf1
	isSet bool
}

func (v NullableVesselAllOf1) Get() *VesselAllOf1 {
	return v.value
}

func (v *NullableVesselAllOf1) Set(val *VesselAllOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableVesselAllOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableVesselAllOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVesselAllOf1(val *VesselAllOf1) *NullableVesselAllOf1 {
	return &NullableVesselAllOf1{value: val, isSet: true}
}

func (v NullableVesselAllOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVesselAllOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
