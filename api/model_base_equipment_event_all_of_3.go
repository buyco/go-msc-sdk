/*
DCSA OpenAPI specification for Track & Trace

Provides equipment actual milestones along with Estimated Time of Arrival following DCSA standards

API version: 2.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the BaseEquipmentEventAllOf3 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseEquipmentEventAllOf3{}

// BaseEquipmentEventAllOf3 struct for BaseEquipmentEventAllOf3
type BaseEquipmentEventAllOf3 struct {
	// The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible. According to ISO 6346, a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit). If a container does not comply with ISO 6346, it is suggested to follow Recommendation #2 “Container with non-ISO identification” from SMDG.
	EquipmentReference *string `json:"equipmentReference,omitempty"`
}

// NewBaseEquipmentEventAllOf3 instantiates a new BaseEquipmentEventAllOf3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseEquipmentEventAllOf3() *BaseEquipmentEventAllOf3 {
	this := BaseEquipmentEventAllOf3{}
	return &this
}

// NewBaseEquipmentEventAllOf3WithDefaults instantiates a new BaseEquipmentEventAllOf3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseEquipmentEventAllOf3WithDefaults() *BaseEquipmentEventAllOf3 {
	this := BaseEquipmentEventAllOf3{}
	return &this
}

// GetEquipmentReference returns the EquipmentReference field value if set, zero value otherwise.
func (o *BaseEquipmentEventAllOf3) GetEquipmentReference() string {
	if o == nil || IsNil(o.EquipmentReference) {
		var ret string
		return ret
	}
	return *o.EquipmentReference
}

// GetEquipmentReferenceOk returns a tuple with the EquipmentReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseEquipmentEventAllOf3) GetEquipmentReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.EquipmentReference) {
		return nil, false
	}
	return o.EquipmentReference, true
}

// HasEquipmentReference returns a boolean if a field has been set.
func (o *BaseEquipmentEventAllOf3) HasEquipmentReference() bool {
	if o != nil && !IsNil(o.EquipmentReference) {
		return true
	}

	return false
}

// SetEquipmentReference gets a reference to the given string and assigns it to the EquipmentReference field.
func (o *BaseEquipmentEventAllOf3) SetEquipmentReference(v string) {
	o.EquipmentReference = &v
}

func (o BaseEquipmentEventAllOf3) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseEquipmentEventAllOf3) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EquipmentReference) {
		toSerialize["equipmentReference"] = o.EquipmentReference
	}
	return toSerialize, nil
}

type NullableBaseEquipmentEventAllOf3 struct {
	value *BaseEquipmentEventAllOf3
	isSet bool
}

func (v NullableBaseEquipmentEventAllOf3) Get() *BaseEquipmentEventAllOf3 {
	return v.value
}

func (v *NullableBaseEquipmentEventAllOf3) Set(val *BaseEquipmentEventAllOf3) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseEquipmentEventAllOf3) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseEquipmentEventAllOf3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseEquipmentEventAllOf3(val *BaseEquipmentEventAllOf3) *NullableBaseEquipmentEventAllOf3 {
	return &NullableBaseEquipmentEventAllOf3{value: val, isSet: true}
}

func (v NullableBaseEquipmentEventAllOf3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseEquipmentEventAllOf3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
