/*
DCSA OpenAPI specification for Track & Trace

Provides equipment actual milestones along with Estimated Time of Arrival following DCSA standards

API version: 2.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the BaseEquipmentEventAllOf2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseEquipmentEventAllOf2{}

// BaseEquipmentEventAllOf2 struct for BaseEquipmentEventAllOf2
type BaseEquipmentEventAllOf2 struct {
	EquipmentEventTypeCode *EquipmentEventTypeCode `json:"equipmentEventTypeCode,omitempty"`
}

// NewBaseEquipmentEventAllOf2 instantiates a new BaseEquipmentEventAllOf2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseEquipmentEventAllOf2() *BaseEquipmentEventAllOf2 {
	this := BaseEquipmentEventAllOf2{}
	return &this
}

// NewBaseEquipmentEventAllOf2WithDefaults instantiates a new BaseEquipmentEventAllOf2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseEquipmentEventAllOf2WithDefaults() *BaseEquipmentEventAllOf2 {
	this := BaseEquipmentEventAllOf2{}
	return &this
}

// GetEquipmentEventTypeCode returns the EquipmentEventTypeCode field value if set, zero value otherwise.
func (o *BaseEquipmentEventAllOf2) GetEquipmentEventTypeCode() EquipmentEventTypeCode {
	if o == nil || IsNil(o.EquipmentEventTypeCode) {
		var ret EquipmentEventTypeCode
		return ret
	}
	return *o.EquipmentEventTypeCode
}

// GetEquipmentEventTypeCodeOk returns a tuple with the EquipmentEventTypeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseEquipmentEventAllOf2) GetEquipmentEventTypeCodeOk() (*EquipmentEventTypeCode, bool) {
	if o == nil || IsNil(o.EquipmentEventTypeCode) {
		return nil, false
	}
	return o.EquipmentEventTypeCode, true
}

// HasEquipmentEventTypeCode returns a boolean if a field has been set.
func (o *BaseEquipmentEventAllOf2) HasEquipmentEventTypeCode() bool {
	if o != nil && !IsNil(o.EquipmentEventTypeCode) {
		return true
	}

	return false
}

// SetEquipmentEventTypeCode gets a reference to the given EquipmentEventTypeCode and assigns it to the EquipmentEventTypeCode field.
func (o *BaseEquipmentEventAllOf2) SetEquipmentEventTypeCode(v EquipmentEventTypeCode) {
	o.EquipmentEventTypeCode = &v
}

func (o BaseEquipmentEventAllOf2) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseEquipmentEventAllOf2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EquipmentEventTypeCode) {
		toSerialize["equipmentEventTypeCode"] = o.EquipmentEventTypeCode
	}
	return toSerialize, nil
}

type NullableBaseEquipmentEventAllOf2 struct {
	value *BaseEquipmentEventAllOf2
	isSet bool
}

func (v NullableBaseEquipmentEventAllOf2) Get() *BaseEquipmentEventAllOf2 {
	return v.value
}

func (v *NullableBaseEquipmentEventAllOf2) Set(val *BaseEquipmentEventAllOf2) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseEquipmentEventAllOf2) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseEquipmentEventAllOf2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseEquipmentEventAllOf2(val *BaseEquipmentEventAllOf2) *NullableBaseEquipmentEventAllOf2 {
	return &NullableBaseEquipmentEventAllOf2{value: val, isSet: true}
}

func (v NullableBaseEquipmentEventAllOf2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseEquipmentEventAllOf2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
