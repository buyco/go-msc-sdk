/*
DCSA OpenAPI specification for Track & Trace

Provides equipment actual milestones along with Estimated Time of Arrival following DCSA standards

API version: 2.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the TransportCallAllOf14 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransportCallAllOf14{}

// TransportCallAllOf14 struct for TransportCallAllOf14
type TransportCallAllOf14 struct {
	Vessel *Vessel `json:"vessel,omitempty"`
}

// NewTransportCallAllOf14 instantiates a new TransportCallAllOf14 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransportCallAllOf14() *TransportCallAllOf14 {
	this := TransportCallAllOf14{}
	return &this
}

// NewTransportCallAllOf14WithDefaults instantiates a new TransportCallAllOf14 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransportCallAllOf14WithDefaults() *TransportCallAllOf14 {
	this := TransportCallAllOf14{}
	return &this
}

// GetVessel returns the Vessel field value if set, zero value otherwise.
func (o *TransportCallAllOf14) GetVessel() Vessel {
	if o == nil || IsNil(o.Vessel) {
		var ret Vessel
		return ret
	}
	return *o.Vessel
}

// GetVesselOk returns a tuple with the Vessel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportCallAllOf14) GetVesselOk() (*Vessel, bool) {
	if o == nil || IsNil(o.Vessel) {
		return nil, false
	}
	return o.Vessel, true
}

// HasVessel returns a boolean if a field has been set.
func (o *TransportCallAllOf14) HasVessel() bool {
	if o != nil && !IsNil(o.Vessel) {
		return true
	}

	return false
}

// SetVessel gets a reference to the given Vessel and assigns it to the Vessel field.
func (o *TransportCallAllOf14) SetVessel(v Vessel) {
	o.Vessel = &v
}

func (o TransportCallAllOf14) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransportCallAllOf14) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Vessel) {
		toSerialize["vessel"] = o.Vessel
	}
	return toSerialize, nil
}

type NullableTransportCallAllOf14 struct {
	value *TransportCallAllOf14
	isSet bool
}

func (v NullableTransportCallAllOf14) Get() *TransportCallAllOf14 {
	return v.value
}

func (v *NullableTransportCallAllOf14) Set(val *TransportCallAllOf14) {
	v.value = val
	v.isSet = true
}

func (v NullableTransportCallAllOf14) IsSet() bool {
	return v.isSet
}

func (v *NullableTransportCallAllOf14) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransportCallAllOf14(val *TransportCallAllOf14) *NullableTransportCallAllOf14 {
	return &NullableTransportCallAllOf14{value: val, isSet: true}
}

func (v NullableTransportCallAllOf14) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransportCallAllOf14) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
