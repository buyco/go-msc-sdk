/*
DCSA Track and Trace API

API specifications for the Track and Trace interface standard issued by DCSA.org.

API version: 1.2.0
Contact: info@dcsa.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

type SubscriptionsApi interface {

	/*
		EventSubscriptionsGet Receive a list of your active subscriptionIDs

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @return ApiEventSubscriptionsGetRequest
	*/
	EventSubscriptionsGet(ctx _context.Context) ApiEventSubscriptionsGetRequest

	// EventSubscriptionsGetExecute executes the request
	//  @return []EventSubscription
	EventSubscriptionsGetExecute(r ApiEventSubscriptionsGetRequest) ([]EventSubscription, *_nethttp.Response, error)

	/*
		EventSubscriptionsPost Create an event subscription

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @return ApiEventSubscriptionsPostRequest
	*/
	EventSubscriptionsPost(ctx _context.Context) ApiEventSubscriptionsPostRequest

	// EventSubscriptionsPostExecute executes the request
	//  @return EventSubscription
	EventSubscriptionsPostExecute(r ApiEventSubscriptionsPostRequest) (EventSubscription, *_nethttp.Response, error)

	/*
		EventSubscriptionsSubscriptionIDDelete Stop an event subscription, using the subscription ID

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param subscriptionID
		 @return ApiEventSubscriptionsSubscriptionIDDeleteRequest
	*/
	EventSubscriptionsSubscriptionIDDelete(ctx _context.Context, subscriptionID string) ApiEventSubscriptionsSubscriptionIDDeleteRequest

	// EventSubscriptionsSubscriptionIDDeleteExecute executes the request
	EventSubscriptionsSubscriptionIDDeleteExecute(r ApiEventSubscriptionsSubscriptionIDDeleteRequest) (*_nethttp.Response, error)

	/*
		EventSubscriptionsSubscriptionIDGet Find event subscription by subscription ID

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param subscriptionID The universal unique ID of the subscription to receive.
		 @return ApiEventSubscriptionsSubscriptionIDGetRequest
	*/
	EventSubscriptionsSubscriptionIDGet(ctx _context.Context, subscriptionID string) ApiEventSubscriptionsSubscriptionIDGetRequest

	// EventSubscriptionsSubscriptionIDGetExecute executes the request
	//  @return EventSubscription
	EventSubscriptionsSubscriptionIDGetExecute(r ApiEventSubscriptionsSubscriptionIDGetRequest) (EventSubscription, *_nethttp.Response, error)

	/*
		EventSubscriptionsSubscriptionIDPut Alter an event subscription

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param subscriptionID
		 @return ApiEventSubscriptionsSubscriptionIDPutRequest
	*/
	EventSubscriptionsSubscriptionIDPut(ctx _context.Context, subscriptionID string) ApiEventSubscriptionsSubscriptionIDPutRequest

	// EventSubscriptionsSubscriptionIDPutExecute executes the request
	//  @return EventSubscription
	EventSubscriptionsSubscriptionIDPutExecute(r ApiEventSubscriptionsSubscriptionIDPutRequest) (EventSubscription, *_nethttp.Response, error)
}

// SubscriptionsApiService SubscriptionsApi service
type SubscriptionsApiService service

type ApiEventSubscriptionsGetRequest struct {
	ctx        _context.Context
	ApiService SubscriptionsApi
}

func (r ApiEventSubscriptionsGetRequest) Execute() ([]EventSubscription, *_nethttp.Response, error) {
	return r.ApiService.EventSubscriptionsGetExecute(r)
}

/*
EventSubscriptionsGet Receive a list of your active subscriptionIDs

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEventSubscriptionsGetRequest
*/
func (a *SubscriptionsApiService) EventSubscriptionsGet(ctx _context.Context) ApiEventSubscriptionsGetRequest {
	return ApiEventSubscriptionsGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return []EventSubscription
func (a *SubscriptionsApiService) EventSubscriptionsGetExecute(r ApiEventSubscriptionsGetRequest) ([]EventSubscription, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []EventSubscription
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionsApiService.EventSubscriptionsGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/event-subscriptions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEventSubscriptionsPostRequest struct {
	ctx                   _context.Context
	ApiService            SubscriptionsApi
	eventSubscriptionBody *EventSubscriptionBody
}

// Parameters used to configure the subscription
func (r ApiEventSubscriptionsPostRequest) EventSubscriptionBody(eventSubscriptionBody EventSubscriptionBody) ApiEventSubscriptionsPostRequest {
	r.eventSubscriptionBody = &eventSubscriptionBody
	return r
}

func (r ApiEventSubscriptionsPostRequest) Execute() (EventSubscription, *_nethttp.Response, error) {
	return r.ApiService.EventSubscriptionsPostExecute(r)
}

/*
EventSubscriptionsPost Create an event subscription

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEventSubscriptionsPostRequest
*/
func (a *SubscriptionsApiService) EventSubscriptionsPost(ctx _context.Context) ApiEventSubscriptionsPostRequest {
	return ApiEventSubscriptionsPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return EventSubscription
func (a *SubscriptionsApiService) EventSubscriptionsPostExecute(r ApiEventSubscriptionsPostRequest) (EventSubscription, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  EventSubscription
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionsApiService.EventSubscriptionsPost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/event-subscriptions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.eventSubscriptionBody == nil {
		return localVarReturnValue, nil, reportError("eventSubscriptionBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.eventSubscriptionBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ModelError
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEventSubscriptionsSubscriptionIDDeleteRequest struct {
	ctx            _context.Context
	ApiService     SubscriptionsApi
	subscriptionID string
}

func (r ApiEventSubscriptionsSubscriptionIDDeleteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.EventSubscriptionsSubscriptionIDDeleteExecute(r)
}

/*
EventSubscriptionsSubscriptionIDDelete Stop an event subscription, using the subscription ID

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param subscriptionID
 @return ApiEventSubscriptionsSubscriptionIDDeleteRequest
*/
func (a *SubscriptionsApiService) EventSubscriptionsSubscriptionIDDelete(ctx _context.Context, subscriptionID string) ApiEventSubscriptionsSubscriptionIDDeleteRequest {
	return ApiEventSubscriptionsSubscriptionIDDeleteRequest{
		ApiService:     a,
		ctx:            ctx,
		subscriptionID: subscriptionID,
	}
}

// Execute executes the request
func (a *SubscriptionsApiService) EventSubscriptionsSubscriptionIDDeleteExecute(r ApiEventSubscriptionsSubscriptionIDDeleteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionsApiService.EventSubscriptionsSubscriptionIDDelete")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/event-subscriptions/{subscriptionID}"
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionID"+"}", _neturl.PathEscape(parameterToString(r.subscriptionID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ModelError
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEventSubscriptionsSubscriptionIDGetRequest struct {
	ctx            _context.Context
	ApiService     SubscriptionsApi
	subscriptionID string
}

func (r ApiEventSubscriptionsSubscriptionIDGetRequest) Execute() (EventSubscription, *_nethttp.Response, error) {
	return r.ApiService.EventSubscriptionsSubscriptionIDGetExecute(r)
}

/*
EventSubscriptionsSubscriptionIDGet Find event subscription by subscription ID

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param subscriptionID The universal unique ID of the subscription to receive.
 @return ApiEventSubscriptionsSubscriptionIDGetRequest
*/
func (a *SubscriptionsApiService) EventSubscriptionsSubscriptionIDGet(ctx _context.Context, subscriptionID string) ApiEventSubscriptionsSubscriptionIDGetRequest {
	return ApiEventSubscriptionsSubscriptionIDGetRequest{
		ApiService:     a,
		ctx:            ctx,
		subscriptionID: subscriptionID,
	}
}

// Execute executes the request
//  @return EventSubscription
func (a *SubscriptionsApiService) EventSubscriptionsSubscriptionIDGetExecute(r ApiEventSubscriptionsSubscriptionIDGetRequest) (EventSubscription, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  EventSubscription
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionsApiService.EventSubscriptionsSubscriptionIDGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/event-subscriptions/{subscriptionID}"
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionID"+"}", _neturl.PathEscape(parameterToString(r.subscriptionID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ModelError
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEventSubscriptionsSubscriptionIDPutRequest struct {
	ctx               _context.Context
	ApiService        SubscriptionsApi
	subscriptionID    string
	eventSubscription *EventSubscription
}

// Parameters used to configure the subscription
func (r ApiEventSubscriptionsSubscriptionIDPutRequest) EventSubscription(eventSubscription EventSubscription) ApiEventSubscriptionsSubscriptionIDPutRequest {
	r.eventSubscription = &eventSubscription
	return r
}

func (r ApiEventSubscriptionsSubscriptionIDPutRequest) Execute() (EventSubscription, *_nethttp.Response, error) {
	return r.ApiService.EventSubscriptionsSubscriptionIDPutExecute(r)
}

/*
EventSubscriptionsSubscriptionIDPut Alter an event subscription

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param subscriptionID
 @return ApiEventSubscriptionsSubscriptionIDPutRequest
*/
func (a *SubscriptionsApiService) EventSubscriptionsSubscriptionIDPut(ctx _context.Context, subscriptionID string) ApiEventSubscriptionsSubscriptionIDPutRequest {
	return ApiEventSubscriptionsSubscriptionIDPutRequest{
		ApiService:     a,
		ctx:            ctx,
		subscriptionID: subscriptionID,
	}
}

// Execute executes the request
//  @return EventSubscription
func (a *SubscriptionsApiService) EventSubscriptionsSubscriptionIDPutExecute(r ApiEventSubscriptionsSubscriptionIDPutRequest) (EventSubscription, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  EventSubscription
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionsApiService.EventSubscriptionsSubscriptionIDPut")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/event-subscriptions/{subscriptionID}"
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionID"+"}", _neturl.PathEscape(parameterToString(r.subscriptionID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.eventSubscription == nil {
		return localVarReturnValue, nil, reportError("eventSubscription is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.eventSubscription
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ModelError
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
