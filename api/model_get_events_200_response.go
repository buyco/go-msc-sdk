/*
DCSA OpenAPI specification for Track & Trace

Provides equipment actual milestones along with Estimated Time of Arrival following DCSA standards

API version: 2.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the GetEvents200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetEvents200Response{}

// GetEvents200Response struct for GetEvents200Response
type GetEvents200Response struct {
	Events []GetEvents200ResponseEventsInner `json:"events"`
}

// NewGetEvents200Response instantiates a new GetEvents200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetEvents200Response(events []GetEvents200ResponseEventsInner) *GetEvents200Response {
	this := GetEvents200Response{}
	this.Events = events
	return &this
}

// NewGetEvents200ResponseWithDefaults instantiates a new GetEvents200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetEvents200ResponseWithDefaults() *GetEvents200Response {
	this := GetEvents200Response{}
	return &this
}

// GetEvents returns the Events field value
func (o *GetEvents200Response) GetEvents() []GetEvents200ResponseEventsInner {
	if o == nil {
		var ret []GetEvents200ResponseEventsInner
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *GetEvents200Response) GetEventsOk() ([]GetEvents200ResponseEventsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *GetEvents200Response) SetEvents(v []GetEvents200ResponseEventsInner) {
	o.Events = v
}

func (o GetEvents200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetEvents200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["events"] = o.Events
	return toSerialize, nil
}

type NullableGetEvents200Response struct {
	value *GetEvents200Response
	isSet bool
}

func (v NullableGetEvents200Response) Get() *GetEvents200Response {
	return v.value
}

func (v *NullableGetEvents200Response) Set(val *GetEvents200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetEvents200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetEvents200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetEvents200Response(val *GetEvents200Response) *NullableGetEvents200Response {
	return &NullableGetEvents200Response{value: val, isSet: true}
}

func (v NullableGetEvents200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetEvents200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
