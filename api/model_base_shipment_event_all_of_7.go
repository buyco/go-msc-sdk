/*
DCSA OpenAPI specification for Track & Trace

Provides equipment actual milestones along with Estimated Time of Arrival following DCSA standards

API version: 2.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the BaseShipmentEventAllOf7 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseShipmentEventAllOf7{}

// BaseShipmentEventAllOf7 struct for BaseShipmentEventAllOf7
type BaseShipmentEventAllOf7 struct {
	// Unique identifier for Event Type Code. For shipment events this can be - RECE (Received) - CONF (Confirmed) - ISSU (Issued) - APPR (Approved) - SUBM (Submitted) - SURR (Surrendered) - REJE (Rejected) - PENA (Pending approval)  Deprecated - use shipmentEventTypeCode instead
	// Deprecated
	EventTypeCode *string `json:"eventTypeCode,omitempty"`
}

// NewBaseShipmentEventAllOf7 instantiates a new BaseShipmentEventAllOf7 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseShipmentEventAllOf7() *BaseShipmentEventAllOf7 {
	this := BaseShipmentEventAllOf7{}
	return &this
}

// NewBaseShipmentEventAllOf7WithDefaults instantiates a new BaseShipmentEventAllOf7 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseShipmentEventAllOf7WithDefaults() *BaseShipmentEventAllOf7 {
	this := BaseShipmentEventAllOf7{}
	return &this
}

// GetEventTypeCode returns the EventTypeCode field value if set, zero value otherwise.
// Deprecated
func (o *BaseShipmentEventAllOf7) GetEventTypeCode() string {
	if o == nil || IsNil(o.EventTypeCode) {
		var ret string
		return ret
	}
	return *o.EventTypeCode
}

// GetEventTypeCodeOk returns a tuple with the EventTypeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *BaseShipmentEventAllOf7) GetEventTypeCodeOk() (*string, bool) {
	if o == nil || IsNil(o.EventTypeCode) {
		return nil, false
	}
	return o.EventTypeCode, true
}

// HasEventTypeCode returns a boolean if a field has been set.
func (o *BaseShipmentEventAllOf7) HasEventTypeCode() bool {
	if o != nil && !IsNil(o.EventTypeCode) {
		return true
	}

	return false
}

// SetEventTypeCode gets a reference to the given string and assigns it to the EventTypeCode field.
// Deprecated
func (o *BaseShipmentEventAllOf7) SetEventTypeCode(v string) {
	o.EventTypeCode = &v
}

func (o BaseShipmentEventAllOf7) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseShipmentEventAllOf7) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventTypeCode) {
		toSerialize["eventTypeCode"] = o.EventTypeCode
	}
	return toSerialize, nil
}

type NullableBaseShipmentEventAllOf7 struct {
	value *BaseShipmentEventAllOf7
	isSet bool
}

func (v NullableBaseShipmentEventAllOf7) Get() *BaseShipmentEventAllOf7 {
	return v.value
}

func (v *NullableBaseShipmentEventAllOf7) Set(val *BaseShipmentEventAllOf7) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseShipmentEventAllOf7) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseShipmentEventAllOf7) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseShipmentEventAllOf7(val *BaseShipmentEventAllOf7) *NullableBaseShipmentEventAllOf7 {
	return &NullableBaseShipmentEventAllOf7{value: val, isSet: true}
}

func (v NullableBaseShipmentEventAllOf7) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseShipmentEventAllOf7) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
