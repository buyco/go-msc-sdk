/*
DCSA OpenAPI specification for Track & Trace

Provides equipment actual milestones along with Estimated Time of Arrival following DCSA standards

API version: 2.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the BaseEquipmentEventAllOf7 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseEquipmentEventAllOf7{}

// BaseEquipmentEventAllOf7 struct for BaseEquipmentEventAllOf7
type BaseEquipmentEventAllOf7 struct {
	// Unique identifier for Event Type Code, for transport events this is either - LOAD (Loaded) - DISC (Discharged) - GTIN (Gated in) - GTOT (Gated out) - STUF (Stuffed) - STRP (Stripped)  Deprecated - use equipmentEventTypeCode instead
	// Deprecated
	EventTypeCode *string `json:"eventTypeCode,omitempty"`
}

// NewBaseEquipmentEventAllOf7 instantiates a new BaseEquipmentEventAllOf7 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseEquipmentEventAllOf7() *BaseEquipmentEventAllOf7 {
	this := BaseEquipmentEventAllOf7{}
	return &this
}

// NewBaseEquipmentEventAllOf7WithDefaults instantiates a new BaseEquipmentEventAllOf7 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseEquipmentEventAllOf7WithDefaults() *BaseEquipmentEventAllOf7 {
	this := BaseEquipmentEventAllOf7{}
	return &this
}

// GetEventTypeCode returns the EventTypeCode field value if set, zero value otherwise.
// Deprecated
func (o *BaseEquipmentEventAllOf7) GetEventTypeCode() string {
	if o == nil || IsNil(o.EventTypeCode) {
		var ret string
		return ret
	}
	return *o.EventTypeCode
}

// GetEventTypeCodeOk returns a tuple with the EventTypeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *BaseEquipmentEventAllOf7) GetEventTypeCodeOk() (*string, bool) {
	if o == nil || IsNil(o.EventTypeCode) {
		return nil, false
	}
	return o.EventTypeCode, true
}

// HasEventTypeCode returns a boolean if a field has been set.
func (o *BaseEquipmentEventAllOf7) HasEventTypeCode() bool {
	if o != nil && !IsNil(o.EventTypeCode) {
		return true
	}

	return false
}

// SetEventTypeCode gets a reference to the given string and assigns it to the EventTypeCode field.
// Deprecated
func (o *BaseEquipmentEventAllOf7) SetEventTypeCode(v string) {
	o.EventTypeCode = &v
}

func (o BaseEquipmentEventAllOf7) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseEquipmentEventAllOf7) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventTypeCode) {
		toSerialize["eventTypeCode"] = o.EventTypeCode
	}
	return toSerialize, nil
}

type NullableBaseEquipmentEventAllOf7 struct {
	value *BaseEquipmentEventAllOf7
	isSet bool
}

func (v NullableBaseEquipmentEventAllOf7) Get() *BaseEquipmentEventAllOf7 {
	return v.value
}

func (v *NullableBaseEquipmentEventAllOf7) Set(val *BaseEquipmentEventAllOf7) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseEquipmentEventAllOf7) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseEquipmentEventAllOf7) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseEquipmentEventAllOf7(val *BaseEquipmentEventAllOf7) *NullableBaseEquipmentEventAllOf7 {
	return &NullableBaseEquipmentEventAllOf7{value: val, isSet: true}
}

func (v NullableBaseEquipmentEventAllOf7) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseEquipmentEventAllOf7) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
