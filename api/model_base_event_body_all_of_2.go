/*
DCSA OpenAPI specification for Track & Trace

Provides equipment actual milestones along with Estimated Time of Arrival following DCSA standards

API version: 2.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// checks if the BaseEventBodyAllOf2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseEventBodyAllOf2{}

// BaseEventBodyAllOf2 struct for BaseEventBodyAllOf2
type BaseEventBodyAllOf2 struct {
	// The local date and time, where the event took place or when the event will take place, in ISO 8601 format.
	EventDateTime *time.Time `json:"eventDateTime,omitempty"`
}

// NewBaseEventBodyAllOf2 instantiates a new BaseEventBodyAllOf2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseEventBodyAllOf2() *BaseEventBodyAllOf2 {
	this := BaseEventBodyAllOf2{}
	return &this
}

// NewBaseEventBodyAllOf2WithDefaults instantiates a new BaseEventBodyAllOf2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseEventBodyAllOf2WithDefaults() *BaseEventBodyAllOf2 {
	this := BaseEventBodyAllOf2{}
	return &this
}

// GetEventDateTime returns the EventDateTime field value if set, zero value otherwise.
func (o *BaseEventBodyAllOf2) GetEventDateTime() time.Time {
	if o == nil || IsNil(o.EventDateTime) {
		var ret time.Time
		return ret
	}
	return *o.EventDateTime
}

// GetEventDateTimeOk returns a tuple with the EventDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseEventBodyAllOf2) GetEventDateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EventDateTime) {
		return nil, false
	}
	return o.EventDateTime, true
}

// HasEventDateTime returns a boolean if a field has been set.
func (o *BaseEventBodyAllOf2) HasEventDateTime() bool {
	if o != nil && !IsNil(o.EventDateTime) {
		return true
	}

	return false
}

// SetEventDateTime gets a reference to the given time.Time and assigns it to the EventDateTime field.
func (o *BaseEventBodyAllOf2) SetEventDateTime(v time.Time) {
	o.EventDateTime = &v
}

func (o BaseEventBodyAllOf2) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseEventBodyAllOf2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventDateTime) {
		toSerialize["eventDateTime"] = o.EventDateTime
	}
	return toSerialize, nil
}

type NullableBaseEventBodyAllOf2 struct {
	value *BaseEventBodyAllOf2
	isSet bool
}

func (v NullableBaseEventBodyAllOf2) Get() *BaseEventBodyAllOf2 {
	return v.value
}

func (v *NullableBaseEventBodyAllOf2) Set(val *BaseEventBodyAllOf2) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseEventBodyAllOf2) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseEventBodyAllOf2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseEventBodyAllOf2(val *BaseEventBodyAllOf2) *NullableBaseEventBodyAllOf2 {
	return &NullableBaseEventBodyAllOf2{value: val, isSet: true}
}

func (v NullableBaseEventBodyAllOf2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseEventBodyAllOf2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
