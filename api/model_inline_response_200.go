/*
DCSA Track and Trace API

API specifications for the Track and Trace interface standard issued by DCSA.org.

API version: 1.2.0
Contact: info@dcsa.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// InlineResponse200 - struct for InlineResponse200
type InlineResponse200 struct {
	EquipmentEvent          *EquipmentEvent
	ShipmentEvent           *ShipmentEvent
	TransportEquipmentEvent *TransportEquipmentEvent
	TransportEvent          *TransportEvent
}

// EquipmentEventAsInlineResponse200 is a convenience function that returns EquipmentEvent wrapped in InlineResponse200
func EquipmentEventAsInlineResponse200(v *EquipmentEvent) InlineResponse200 {
	return InlineResponse200{EquipmentEvent: v}
}

// ShipmentEventAsInlineResponse200 is a convenience function that returns ShipmentEvent wrapped in InlineResponse200
func ShipmentEventAsInlineResponse200(v *ShipmentEvent) InlineResponse200 {
	return InlineResponse200{ShipmentEvent: v}
}

// TransportEquipmentEventAsInlineResponse200 is a convenience function that returns TransportEquipmentEvent wrapped in InlineResponse200
func TransportEquipmentEventAsInlineResponse200(v *TransportEquipmentEvent) InlineResponse200 {
	return InlineResponse200{TransportEquipmentEvent: v}
}

// TransportEventAsInlineResponse200 is a convenience function that returns TransportEvent wrapped in InlineResponse200
func TransportEventAsInlineResponse200(v *TransportEvent) InlineResponse200 {
	return InlineResponse200{TransportEvent: v}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *InlineResponse200) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into EquipmentEvent
	err = json.Unmarshal(data, &dst.EquipmentEvent)
	if err == nil {
		jsonEquipmentEvent, _ := json.Marshal(dst.EquipmentEvent)
		if string(jsonEquipmentEvent) == "{}" { // empty struct
			dst.EquipmentEvent = nil
		} else {
			match++
		}
	} else {
		dst.EquipmentEvent = nil
	}

	// try to unmarshal data into ShipmentEvent
	err = json.Unmarshal(data, &dst.ShipmentEvent)
	if err == nil {
		jsonShipmentEvent, _ := json.Marshal(dst.ShipmentEvent)
		if string(jsonShipmentEvent) == "{}" { // empty struct
			dst.ShipmentEvent = nil
		} else {
			match++
		}
	} else {
		dst.ShipmentEvent = nil
	}

	// try to unmarshal data into TransportEquipmentEvent
	err = json.Unmarshal(data, &dst.TransportEquipmentEvent)
	if err == nil {
		jsonTransportEquipmentEvent, _ := json.Marshal(dst.TransportEquipmentEvent)
		if string(jsonTransportEquipmentEvent) == "{}" { // empty struct
			dst.TransportEquipmentEvent = nil
		} else {
			match++
		}
	} else {
		dst.TransportEquipmentEvent = nil
	}

	// try to unmarshal data into TransportEvent
	err = json.Unmarshal(data, &dst.TransportEvent)
	if err == nil {
		jsonTransportEvent, _ := json.Marshal(dst.TransportEvent)
		if string(jsonTransportEvent) == "{}" { // empty struct
			dst.TransportEvent = nil
		} else {
			match++
		}
	} else {
		dst.TransportEvent = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.EquipmentEvent = nil
		dst.ShipmentEvent = nil
		dst.TransportEquipmentEvent = nil
		dst.TransportEvent = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(InlineResponse200)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(InlineResponse200)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src InlineResponse200) MarshalJSON() ([]byte, error) {
	if src.EquipmentEvent != nil {
		return json.Marshal(&src.EquipmentEvent)
	}

	if src.ShipmentEvent != nil {
		return json.Marshal(&src.ShipmentEvent)
	}

	if src.TransportEquipmentEvent != nil {
		return json.Marshal(&src.TransportEquipmentEvent)
	}

	if src.TransportEvent != nil {
		return json.Marshal(&src.TransportEvent)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *InlineResponse200) GetActualInstance() interface{} {
	if obj.EquipmentEvent != nil {
		return obj.EquipmentEvent
	}

	if obj.ShipmentEvent != nil {
		return obj.ShipmentEvent
	}

	if obj.TransportEquipmentEvent != nil {
		return obj.TransportEquipmentEvent
	}

	if obj.TransportEvent != nil {
		return obj.TransportEvent
	}

	// all schemas are nil
	return nil
}

type NullableInlineResponse200 struct {
	value *InlineResponse200
	isSet bool
}

func (v NullableInlineResponse200) Get() *InlineResponse200 {
	return v.value
}

func (v *NullableInlineResponse200) Set(val *InlineResponse200) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200(val *InlineResponse200) *NullableInlineResponse200 {
	return &NullableInlineResponse200{value: val, isSet: true}
}

func (v NullableInlineResponse200) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
