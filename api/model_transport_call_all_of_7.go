/*
DCSA OpenAPI specification for Track & Trace

Provides equipment actual milestones along with Estimated Time of Arrival following DCSA standards

API version: 2.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the TransportCallAllOf7 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransportCallAllOf7{}

// TransportCallAllOf7 struct for TransportCallAllOf7
type TransportCallAllOf7 struct {
	// The UN Location code specifying where the place is located.
	UNLocationCode *string `json:"UNLocationCode,omitempty"`
}

// NewTransportCallAllOf7 instantiates a new TransportCallAllOf7 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransportCallAllOf7() *TransportCallAllOf7 {
	this := TransportCallAllOf7{}
	return &this
}

// NewTransportCallAllOf7WithDefaults instantiates a new TransportCallAllOf7 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransportCallAllOf7WithDefaults() *TransportCallAllOf7 {
	this := TransportCallAllOf7{}
	return &this
}

// GetUNLocationCode returns the UNLocationCode field value if set, zero value otherwise.
func (o *TransportCallAllOf7) GetUNLocationCode() string {
	if o == nil || IsNil(o.UNLocationCode) {
		var ret string
		return ret
	}
	return *o.UNLocationCode
}

// GetUNLocationCodeOk returns a tuple with the UNLocationCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportCallAllOf7) GetUNLocationCodeOk() (*string, bool) {
	if o == nil || IsNil(o.UNLocationCode) {
		return nil, false
	}
	return o.UNLocationCode, true
}

// HasUNLocationCode returns a boolean if a field has been set.
func (o *TransportCallAllOf7) HasUNLocationCode() bool {
	if o != nil && !IsNil(o.UNLocationCode) {
		return true
	}

	return false
}

// SetUNLocationCode gets a reference to the given string and assigns it to the UNLocationCode field.
func (o *TransportCallAllOf7) SetUNLocationCode(v string) {
	o.UNLocationCode = &v
}

func (o TransportCallAllOf7) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransportCallAllOf7) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UNLocationCode) {
		toSerialize["UNLocationCode"] = o.UNLocationCode
	}
	return toSerialize, nil
}

type NullableTransportCallAllOf7 struct {
	value *TransportCallAllOf7
	isSet bool
}

func (v NullableTransportCallAllOf7) Get() *TransportCallAllOf7 {
	return v.value
}

func (v *NullableTransportCallAllOf7) Set(val *TransportCallAllOf7) {
	v.value = val
	v.isSet = true
}

func (v NullableTransportCallAllOf7) IsSet() bool {
	return v.isSet
}

func (v *NullableTransportCallAllOf7) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransportCallAllOf7(val *TransportCallAllOf7) *NullableTransportCallAllOf7 {
	return &NullableTransportCallAllOf7{value: val, isSet: true}
}

func (v NullableTransportCallAllOf7) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransportCallAllOf7) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
