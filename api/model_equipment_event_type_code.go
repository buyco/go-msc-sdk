/*
DCSA OpenAPI specification for Track & Trace

Provides equipment actual milestones along with Estimated Time of Arrival following DCSA standards

API version: 2.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// EquipmentEventTypeCode Unique identifier for equipmentEventTypeCode. - LOAD (Loaded) - DISC (Discharged) - GTIN (Gated in) - GTOT (Gated out) - STUF (Stuffed) - STRP (Stripped) - PICK (Pick-up) - DROP (Drop-off) - INSP (Inspected) - RSEA (Resealed) - RMVD (Removed)  More details can be found on <a href=\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/equipmenteventtypecodes.csv\">GitHub</a>
type EquipmentEventTypeCode string

// List of equipmentEventTypeCode
const (
	LOAD EquipmentEventTypeCode = "LOAD"
	DISC EquipmentEventTypeCode = "DISC"
	GTIN EquipmentEventTypeCode = "GTIN"
	GTOT EquipmentEventTypeCode = "GTOT"
	STUF EquipmentEventTypeCode = "STUF"
	STRP EquipmentEventTypeCode = "STRP"
	PICK EquipmentEventTypeCode = "PICK"
	DROP EquipmentEventTypeCode = "DROP"
	INSP EquipmentEventTypeCode = "INSP"
	RSEA EquipmentEventTypeCode = "RSEA"
	RMVD EquipmentEventTypeCode = "RMVD"
)

// All allowed values of EquipmentEventTypeCode enum
var AllowedEquipmentEventTypeCodeEnumValues = []EquipmentEventTypeCode{
	"LOAD",
	"DISC",
	"GTIN",
	"GTOT",
	"STUF",
	"STRP",
	"PICK",
	"DROP",
	"INSP",
	"RSEA",
	"RMVD",
}

func (v *EquipmentEventTypeCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EquipmentEventTypeCode(value)
	for _, existing := range AllowedEquipmentEventTypeCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EquipmentEventTypeCode", value)
}

// NewEquipmentEventTypeCodeFromValue returns a pointer to a valid EquipmentEventTypeCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEquipmentEventTypeCodeFromValue(v string) (*EquipmentEventTypeCode, error) {
	ev := EquipmentEventTypeCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EquipmentEventTypeCode: valid values are %v", v, AllowedEquipmentEventTypeCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EquipmentEventTypeCode) IsValid() bool {
	for _, existing := range AllowedEquipmentEventTypeCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to equipmentEventTypeCode value
func (v EquipmentEventTypeCode) Ptr() *EquipmentEventTypeCode {
	return &v
}

type NullableEquipmentEventTypeCode struct {
	value *EquipmentEventTypeCode
	isSet bool
}

func (v NullableEquipmentEventTypeCode) Get() *EquipmentEventTypeCode {
	return v.value
}

func (v *NullableEquipmentEventTypeCode) Set(val *EquipmentEventTypeCode) {
	v.value = val
	v.isSet = true
}

func (v NullableEquipmentEventTypeCode) IsSet() bool {
	return v.isSet
}

func (v *NullableEquipmentEventTypeCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEquipmentEventTypeCode(val *EquipmentEventTypeCode) *NullableEquipmentEventTypeCode {
	return &NullableEquipmentEventTypeCode{value: val, isSet: true}
}

func (v NullableEquipmentEventTypeCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEquipmentEventTypeCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
