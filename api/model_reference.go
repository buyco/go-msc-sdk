/*
DCSA OpenAPI specification for Track & Trace

Provides equipment actual milestones along with Estimated Time of Arrival following DCSA standards

API version: 2.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the Reference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Reference{}

// Reference references provided by the shipper or freight forwarder at the time of booking or at the time of providing shipping instruction. Carriers share it back when providing track and trace event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.
type Reference struct {
	ReferenceType ReferenceType `json:"referenceType"`
	// The actual value of the reference.
	ReferenceValue string `json:"referenceValue"`
}

// NewReference instantiates a new Reference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReference(referenceType ReferenceType, referenceValue string) *Reference {
	this := Reference{}
	this.ReferenceType = referenceType
	this.ReferenceValue = referenceValue
	return &this
}

// NewReferenceWithDefaults instantiates a new Reference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReferenceWithDefaults() *Reference {
	this := Reference{}
	return &this
}

// GetReferenceType returns the ReferenceType field value
func (o *Reference) GetReferenceType() ReferenceType {
	if o == nil {
		var ret ReferenceType
		return ret
	}

	return o.ReferenceType
}

// GetReferenceTypeOk returns a tuple with the ReferenceType field value
// and a boolean to check if the value has been set.
func (o *Reference) GetReferenceTypeOk() (*ReferenceType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReferenceType, true
}

// SetReferenceType sets field value
func (o *Reference) SetReferenceType(v ReferenceType) {
	o.ReferenceType = v
}

// GetReferenceValue returns the ReferenceValue field value
func (o *Reference) GetReferenceValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReferenceValue
}

// GetReferenceValueOk returns a tuple with the ReferenceValue field value
// and a boolean to check if the value has been set.
func (o *Reference) GetReferenceValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReferenceValue, true
}

// SetReferenceValue sets field value
func (o *Reference) SetReferenceValue(v string) {
	o.ReferenceValue = v
}

func (o Reference) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Reference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["referenceType"] = o.ReferenceType
	toSerialize["referenceValue"] = o.ReferenceValue
	return toSerialize, nil
}

type NullableReference struct {
	value *Reference
	isSet bool
}

func (v NullableReference) Get() *Reference {
	return v.value
}

func (v *NullableReference) Set(val *Reference) {
	v.value = val
	v.isSet = true
}

func (v NullableReference) IsSet() bool {
	return v.isSet
}

func (v *NullableReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReference(val *Reference) *NullableReference {
	return &NullableReference{value: val, isSet: true}
}

func (v NullableReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
