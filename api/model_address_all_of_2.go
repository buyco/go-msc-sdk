/*
DCSA OpenAPI specification for Track & Trace

Provides equipment actual milestones along with Estimated Time of Arrival following DCSA standards

API version: 2.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the AddressAllOf2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddressAllOf2{}

// AddressAllOf2 struct for AddressAllOf2
type AddressAllOf2 struct {
	// The number of the street of the partyâ€™s address.
	StreetNumber *string `json:"streetNumber,omitempty"`
}

// NewAddressAllOf2 instantiates a new AddressAllOf2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddressAllOf2() *AddressAllOf2 {
	this := AddressAllOf2{}
	return &this
}

// NewAddressAllOf2WithDefaults instantiates a new AddressAllOf2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressAllOf2WithDefaults() *AddressAllOf2 {
	this := AddressAllOf2{}
	return &this
}

// GetStreetNumber returns the StreetNumber field value if set, zero value otherwise.
func (o *AddressAllOf2) GetStreetNumber() string {
	if o == nil || IsNil(o.StreetNumber) {
		var ret string
		return ret
	}
	return *o.StreetNumber
}

// GetStreetNumberOk returns a tuple with the StreetNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressAllOf2) GetStreetNumberOk() (*string, bool) {
	if o == nil || IsNil(o.StreetNumber) {
		return nil, false
	}
	return o.StreetNumber, true
}

// HasStreetNumber returns a boolean if a field has been set.
func (o *AddressAllOf2) HasStreetNumber() bool {
	if o != nil && !IsNil(o.StreetNumber) {
		return true
	}

	return false
}

// SetStreetNumber gets a reference to the given string and assigns it to the StreetNumber field.
func (o *AddressAllOf2) SetStreetNumber(v string) {
	o.StreetNumber = &v
}

func (o AddressAllOf2) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddressAllOf2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StreetNumber) {
		toSerialize["streetNumber"] = o.StreetNumber
	}
	return toSerialize, nil
}

type NullableAddressAllOf2 struct {
	value *AddressAllOf2
	isSet bool
}

func (v NullableAddressAllOf2) Get() *AddressAllOf2 {
	return v.value
}

func (v *NullableAddressAllOf2) Set(val *AddressAllOf2) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressAllOf2) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressAllOf2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressAllOf2(val *AddressAllOf2) *NullableAddressAllOf2 {
	return &NullableAddressAllOf2{value: val, isSet: true}
}

func (v NullableAddressAllOf2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressAllOf2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
