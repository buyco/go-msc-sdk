/*
DCSA OpenAPI specification for Track & Trace

Provides equipment actual milestones along with Estimated Time of Arrival following DCSA standards

API version: 2.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the BaseShipmentEventAllOf5 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseShipmentEventAllOf5{}

// BaseShipmentEventAllOf5 struct for BaseShipmentEventAllOf5
type BaseShipmentEventAllOf5 struct {
	// Deprecated
	ShipmentInformationTypeCode *ShipmentInformationType `json:"shipmentInformationTypeCode,omitempty"`
}

// NewBaseShipmentEventAllOf5 instantiates a new BaseShipmentEventAllOf5 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseShipmentEventAllOf5() *BaseShipmentEventAllOf5 {
	this := BaseShipmentEventAllOf5{}
	return &this
}

// NewBaseShipmentEventAllOf5WithDefaults instantiates a new BaseShipmentEventAllOf5 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseShipmentEventAllOf5WithDefaults() *BaseShipmentEventAllOf5 {
	this := BaseShipmentEventAllOf5{}
	return &this
}

// GetShipmentInformationTypeCode returns the ShipmentInformationTypeCode field value if set, zero value otherwise.
// Deprecated
func (o *BaseShipmentEventAllOf5) GetShipmentInformationTypeCode() ShipmentInformationType {
	if o == nil || IsNil(o.ShipmentInformationTypeCode) {
		var ret ShipmentInformationType
		return ret
	}
	return *o.ShipmentInformationTypeCode
}

// GetShipmentInformationTypeCodeOk returns a tuple with the ShipmentInformationTypeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *BaseShipmentEventAllOf5) GetShipmentInformationTypeCodeOk() (*ShipmentInformationType, bool) {
	if o == nil || IsNil(o.ShipmentInformationTypeCode) {
		return nil, false
	}
	return o.ShipmentInformationTypeCode, true
}

// HasShipmentInformationTypeCode returns a boolean if a field has been set.
func (o *BaseShipmentEventAllOf5) HasShipmentInformationTypeCode() bool {
	if o != nil && !IsNil(o.ShipmentInformationTypeCode) {
		return true
	}

	return false
}

// SetShipmentInformationTypeCode gets a reference to the given ShipmentInformationType and assigns it to the ShipmentInformationTypeCode field.
// Deprecated
func (o *BaseShipmentEventAllOf5) SetShipmentInformationTypeCode(v ShipmentInformationType) {
	o.ShipmentInformationTypeCode = &v
}

func (o BaseShipmentEventAllOf5) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseShipmentEventAllOf5) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ShipmentInformationTypeCode) {
		toSerialize["shipmentInformationTypeCode"] = o.ShipmentInformationTypeCode
	}
	return toSerialize, nil
}

type NullableBaseShipmentEventAllOf5 struct {
	value *BaseShipmentEventAllOf5
	isSet bool
}

func (v NullableBaseShipmentEventAllOf5) Get() *BaseShipmentEventAllOf5 {
	return v.value
}

func (v *NullableBaseShipmentEventAllOf5) Set(val *BaseShipmentEventAllOf5) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseShipmentEventAllOf5) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseShipmentEventAllOf5) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseShipmentEventAllOf5(val *BaseShipmentEventAllOf5) *NullableBaseShipmentEventAllOf5 {
	return &NullableBaseShipmentEventAllOf5{value: val, isSet: true}
}

func (v NullableBaseShipmentEventAllOf5) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseShipmentEventAllOf5) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
