/*
DCSA Track and Trace API

API specifications for the Track and Trace interface standard issued by DCSA.org.

API version: 1.2.0
Contact: info@dcsa.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"reflect"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

type EventsApi interface {

	/*
		EventsEventIDGet Find events by eventID.

		Returns event with the specified eventID.

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param eventID The ID of the event to receive
		 @return ApiEventsEventIDGetRequest
	*/
	EventsEventIDGet(ctx _context.Context, eventID string) ApiEventsEventIDGetRequest

	// EventsEventIDGetExecute executes the request
	//  @return InlineResponse200
	EventsEventIDGetExecute(r ApiEventsEventIDGetRequest) (InlineResponse200, *_nethttp.Response, error)

	/*
		EventsGet Find events by type, Booking Reference, Bill of Lading or Equipment Reference.

		Returns all events filtered by the parameters.

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @return ApiEventsGetRequest
	*/
	EventsGet(ctx _context.Context) ApiEventsGetRequest

	// EventsGetExecute executes the request
	//  @return Events
	EventsGetExecute(r ApiEventsGetRequest) (Events, *_nethttp.Response, error)
}

// EventsApiService EventsApi service
type EventsApiService service

type ApiEventsEventIDGetRequest struct {
	ctx        _context.Context
	ApiService EventsApi
	eventID    string
}

func (r ApiEventsEventIDGetRequest) Execute() (InlineResponse200, *_nethttp.Response, error) {
	return r.ApiService.EventsEventIDGetExecute(r)
}

/*
EventsEventIDGet Find events by eventID.

Returns event with the specified eventID.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param eventID The ID of the event to receive
 @return ApiEventsEventIDGetRequest
*/
func (a *EventsApiService) EventsEventIDGet(ctx _context.Context, eventID string) ApiEventsEventIDGetRequest {
	return ApiEventsEventIDGetRequest{
		ApiService: a,
		ctx:        ctx,
		eventID:    eventID,
	}
}

// Execute executes the request
//  @return InlineResponse200
func (a *EventsApiService) EventsEventIDGetExecute(r ApiEventsEventIDGetRequest) (InlineResponse200, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse200
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventsApiService.EventsEventIDGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/events/{eventID}"
	localVarPath = strings.Replace(localVarPath, "{"+"eventID"+"}", _neturl.PathEscape(parameterToString(r.eventID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ModelError
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEventsGetRequest struct {
	ctx                _context.Context
	ApiService         EventsApi
	eventType          *[]EventType
	bookingReference   *string
	billOfLadingNumber *string
	equipmentReference *string
}

// The type of event(s) to filter by.
func (r ApiEventsGetRequest) EventType(eventType []EventType) ApiEventsGetRequest {
	r.eventType = &eventType
	return r
}

// The identifier for a shipment, which is issued by and unique within each of the carriers.
func (r ApiEventsGetRequest) BookingReference(bookingReference string) ApiEventsGetRequest {
	r.bookingReference = &bookingReference
	return r
}

// Bill of lading number is an identifier that links to a shipment. Bill of Lading is the legal document issued to the customer, which confirms the carrier&#39;s receipt of the cargo from the customer acknowledging goods being shipped and specifying the terms of delivery.
func (r ApiEventsGetRequest) BillOfLadingNumber(billOfLadingNumber string) ApiEventsGetRequest {
	r.billOfLadingNumber = &billOfLadingNumber
	return r
}

// The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.
func (r ApiEventsGetRequest) EquipmentReference(equipmentReference string) ApiEventsGetRequest {
	r.equipmentReference = &equipmentReference
	return r
}

func (r ApiEventsGetRequest) Execute() (Events, *_nethttp.Response, error) {
	return r.ApiService.EventsGetExecute(r)
}

/*
EventsGet Find events by type, Booking Reference, Bill of Lading or Equipment Reference.

Returns all events filtered by the parameters.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEventsGetRequest
*/
func (a *EventsApiService) EventsGet(ctx _context.Context) ApiEventsGetRequest {
	return ApiEventsGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return Events
func (a *EventsApiService) EventsGetExecute(r ApiEventsGetRequest) (Events, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Events
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventsApiService.EventsGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/events"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.eventType != nil {
		t := *r.eventType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("eventType", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("eventType", parameterToString(t, "multi"))
		}
	}
	if r.bookingReference != nil {
		localVarQueryParams.Add("bookingReference", parameterToString(*r.bookingReference, ""))
	}
	if r.billOfLadingNumber != nil {
		localVarQueryParams.Add("billOfLadingNumber", parameterToString(*r.billOfLadingNumber, ""))
	}
	if r.equipmentReference != nil {
		localVarQueryParams.Add("equipmentReference", parameterToString(*r.equipmentReference, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v ModelError
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
