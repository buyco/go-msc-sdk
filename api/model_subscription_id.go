/*
DCSA Track and Trace API

API specifications for the Track and Trace interface standard issued by DCSA.org.

API version: 1.2.0
Contact: info@dcsa.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// SubscriptionID The carrier issues a unique ID to the shipper or consignee for that subscription
type SubscriptionID struct {
	SubscriptionID *string `json:"subscriptionID,omitempty"`
}

// NewSubscriptionID instantiates a new SubscriptionID object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionID() *SubscriptionID {
	this := SubscriptionID{}
	return &this
}

// NewSubscriptionIDWithDefaults instantiates a new SubscriptionID object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionIDWithDefaults() *SubscriptionID {
	this := SubscriptionID{}
	return &this
}

// GetSubscriptionID returns the SubscriptionID field value if set, zero value otherwise.
func (o *SubscriptionID) GetSubscriptionID() string {
	if o == nil || o.SubscriptionID == nil {
		var ret string
		return ret
	}
	return *o.SubscriptionID
}

// GetSubscriptionIDOk returns a tuple with the SubscriptionID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionID) GetSubscriptionIDOk() (*string, bool) {
	if o == nil || o.SubscriptionID == nil {
		return nil, false
	}
	return o.SubscriptionID, true
}

// HasSubscriptionID returns a boolean if a field has been set.
func (o *SubscriptionID) HasSubscriptionID() bool {
	if o != nil && o.SubscriptionID != nil {
		return true
	}

	return false
}

// SetSubscriptionID gets a reference to the given string and assigns it to the SubscriptionID field.
func (o *SubscriptionID) SetSubscriptionID(v string) {
	o.SubscriptionID = &v
}

func (o SubscriptionID) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SubscriptionID != nil {
		toSerialize["subscriptionID"] = o.SubscriptionID
	}
	return json.Marshal(toSerialize)
}

type NullableSubscriptionID struct {
	value *SubscriptionID
	isSet bool
}

func (v NullableSubscriptionID) Get() *SubscriptionID {
	return v.value
}

func (v *NullableSubscriptionID) Set(val *SubscriptionID) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionID) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionID) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionID(val *SubscriptionID) *NullableSubscriptionID {
	return &NullableSubscriptionID{value: val, isSet: true}
}

func (v NullableSubscriptionID) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionID) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
