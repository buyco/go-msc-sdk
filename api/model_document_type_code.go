/*
DCSA OpenAPI specification for Track & Trace

Provides equipment actual milestones along with Estimated Time of Arrival following DCSA standards

API version: 2.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// DocumentTypeCode The code to identify the type of information documentID points to. Can be one of the following values - CBR (Carrier Booking Request Reference) - BKG (Booking) - SHI (Shipping Instruction) - SRM (Shipment Release Message) - TRD (Transport Document) - ARN (Arrival Notice) - VGM (Verified Gross Mass) - CAS (Cargo Survey) - CUS (Customs Inspection) - DGD (Dangerous Goods Declaration) - OOG (Out of Gauge)  More details can be found on <a href=\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/documenttypecodes.csv\">GitHub</a>
type DocumentTypeCode string

// List of documentTypeCode
const (
	CBR DocumentTypeCode = "CBR"
	BKG DocumentTypeCode = "BKG"
	SHI DocumentTypeCode = "SHI"
	SRM DocumentTypeCode = "SRM"
	TRD DocumentTypeCode = "TRD"
	ARN DocumentTypeCode = "ARN"
	VGM DocumentTypeCode = "VGM"
	CAS DocumentTypeCode = "CAS"
	CUS DocumentTypeCode = "CUS"
	DGD DocumentTypeCode = "DGD"
	OOG DocumentTypeCode = "OOG"
)

// All allowed values of DocumentTypeCode enum
var AllowedDocumentTypeCodeEnumValues = []DocumentTypeCode{
	"CBR",
	"BKG",
	"SHI",
	"SRM",
	"TRD",
	"ARN",
	"VGM",
	"CAS",
	"CUS",
	"DGD",
	"OOG",
}

func (v *DocumentTypeCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DocumentTypeCode(value)
	for _, existing := range AllowedDocumentTypeCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DocumentTypeCode", value)
}

// NewDocumentTypeCodeFromValue returns a pointer to a valid DocumentTypeCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDocumentTypeCodeFromValue(v string) (*DocumentTypeCode, error) {
	ev := DocumentTypeCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DocumentTypeCode: valid values are %v", v, AllowedDocumentTypeCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DocumentTypeCode) IsValid() bool {
	for _, existing := range AllowedDocumentTypeCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to documentTypeCode value
func (v DocumentTypeCode) Ptr() *DocumentTypeCode {
	return &v
}

type NullableDocumentTypeCode struct {
	value *DocumentTypeCode
	isSet bool
}

func (v NullableDocumentTypeCode) Get() *DocumentTypeCode {
	return v.value
}

func (v *NullableDocumentTypeCode) Set(val *DocumentTypeCode) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentTypeCode) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentTypeCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentTypeCode(val *DocumentTypeCode) *NullableDocumentTypeCode {
	return &NullableDocumentTypeCode{value: val, isSet: true}
}

func (v NullableDocumentTypeCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentTypeCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
