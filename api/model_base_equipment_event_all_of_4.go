/*
DCSA OpenAPI specification for Track & Trace

Provides equipment actual milestones along with Estimated Time of Arrival following DCSA standards

API version: 2.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the BaseEquipmentEventAllOf4 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseEquipmentEventAllOf4{}

// BaseEquipmentEventAllOf4 struct for BaseEquipmentEventAllOf4
type BaseEquipmentEventAllOf4 struct {
	// Unique code for the different equipment size/type used for transporting commodities. The code is a concatenation of ISO Equipment Size Code and ISO Equipment Type Code A and follows the ISO 6346 standard.
	ISOEquipmentCode *string `json:"ISOEquipmentCode,omitempty"`
}

// NewBaseEquipmentEventAllOf4 instantiates a new BaseEquipmentEventAllOf4 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseEquipmentEventAllOf4() *BaseEquipmentEventAllOf4 {
	this := BaseEquipmentEventAllOf4{}
	return &this
}

// NewBaseEquipmentEventAllOf4WithDefaults instantiates a new BaseEquipmentEventAllOf4 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseEquipmentEventAllOf4WithDefaults() *BaseEquipmentEventAllOf4 {
	this := BaseEquipmentEventAllOf4{}
	return &this
}

// GetISOEquipmentCode returns the ISOEquipmentCode field value if set, zero value otherwise.
func (o *BaseEquipmentEventAllOf4) GetISOEquipmentCode() string {
	if o == nil || IsNil(o.ISOEquipmentCode) {
		var ret string
		return ret
	}
	return *o.ISOEquipmentCode
}

// GetISOEquipmentCodeOk returns a tuple with the ISOEquipmentCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseEquipmentEventAllOf4) GetISOEquipmentCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ISOEquipmentCode) {
		return nil, false
	}
	return o.ISOEquipmentCode, true
}

// HasISOEquipmentCode returns a boolean if a field has been set.
func (o *BaseEquipmentEventAllOf4) HasISOEquipmentCode() bool {
	if o != nil && !IsNil(o.ISOEquipmentCode) {
		return true
	}

	return false
}

// SetISOEquipmentCode gets a reference to the given string and assigns it to the ISOEquipmentCode field.
func (o *BaseEquipmentEventAllOf4) SetISOEquipmentCode(v string) {
	o.ISOEquipmentCode = &v
}

func (o BaseEquipmentEventAllOf4) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseEquipmentEventAllOf4) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ISOEquipmentCode) {
		toSerialize["ISOEquipmentCode"] = o.ISOEquipmentCode
	}
	return toSerialize, nil
}

type NullableBaseEquipmentEventAllOf4 struct {
	value *BaseEquipmentEventAllOf4
	isSet bool
}

func (v NullableBaseEquipmentEventAllOf4) Get() *BaseEquipmentEventAllOf4 {
	return v.value
}

func (v *NullableBaseEquipmentEventAllOf4) Set(val *BaseEquipmentEventAllOf4) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseEquipmentEventAllOf4) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseEquipmentEventAllOf4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseEquipmentEventAllOf4(val *BaseEquipmentEventAllOf4) *NullableBaseEquipmentEventAllOf4 {
	return &NullableBaseEquipmentEventAllOf4{value: val, isSet: true}
}

func (v NullableBaseEquipmentEventAllOf4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseEquipmentEventAllOf4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
