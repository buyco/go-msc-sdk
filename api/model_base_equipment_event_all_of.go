/*
DCSA OpenAPI specification for Track & Trace

Provides equipment actual milestones along with Estimated Time of Arrival following DCSA standards

API version: 2.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the BaseEquipmentEventAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseEquipmentEventAllOf{}

// BaseEquipmentEventAllOf struct for BaseEquipmentEventAllOf
type BaseEquipmentEventAllOf struct {
	EventType *string `json:"eventType,omitempty"`
}

// NewBaseEquipmentEventAllOf instantiates a new BaseEquipmentEventAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseEquipmentEventAllOf() *BaseEquipmentEventAllOf {
	this := BaseEquipmentEventAllOf{}
	return &this
}

// NewBaseEquipmentEventAllOfWithDefaults instantiates a new BaseEquipmentEventAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseEquipmentEventAllOfWithDefaults() *BaseEquipmentEventAllOf {
	this := BaseEquipmentEventAllOf{}
	return &this
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *BaseEquipmentEventAllOf) GetEventType() string {
	if o == nil || IsNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseEquipmentEventAllOf) GetEventTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *BaseEquipmentEventAllOf) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *BaseEquipmentEventAllOf) SetEventType(v string) {
	o.EventType = &v
}

func (o BaseEquipmentEventAllOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseEquipmentEventAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventType) {
		toSerialize["eventType"] = o.EventType
	}
	return toSerialize, nil
}

type NullableBaseEquipmentEventAllOf struct {
	value *BaseEquipmentEventAllOf
	isSet bool
}

func (v NullableBaseEquipmentEventAllOf) Get() *BaseEquipmentEventAllOf {
	return v.value
}

func (v *NullableBaseEquipmentEventAllOf) Set(val *BaseEquipmentEventAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseEquipmentEventAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseEquipmentEventAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseEquipmentEventAllOf(val *BaseEquipmentEventAllOf) *NullableBaseEquipmentEventAllOf {
	return &NullableBaseEquipmentEventAllOf{value: val, isSet: true}
}

func (v NullableBaseEquipmentEventAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseEquipmentEventAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
