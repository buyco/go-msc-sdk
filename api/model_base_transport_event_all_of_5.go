/*
DCSA OpenAPI specification for Track & Trace

Provides equipment actual milestones along with Estimated Time of Arrival following DCSA standards

API version: 2.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the BaseTransportEventAllOf5 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseTransportEventAllOf5{}

// BaseTransportEventAllOf5 struct for BaseTransportEventAllOf5
type BaseTransportEventAllOf5 struct {
	// Free text information provided by the vessel operator regarding the reasons for the change in schedule and/or plans to mitigate schedule slippage.
	ChangeRemark *string `json:"changeRemark,omitempty"`
}

// NewBaseTransportEventAllOf5 instantiates a new BaseTransportEventAllOf5 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseTransportEventAllOf5() *BaseTransportEventAllOf5 {
	this := BaseTransportEventAllOf5{}
	return &this
}

// NewBaseTransportEventAllOf5WithDefaults instantiates a new BaseTransportEventAllOf5 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseTransportEventAllOf5WithDefaults() *BaseTransportEventAllOf5 {
	this := BaseTransportEventAllOf5{}
	return &this
}

// GetChangeRemark returns the ChangeRemark field value if set, zero value otherwise.
func (o *BaseTransportEventAllOf5) GetChangeRemark() string {
	if o == nil || IsNil(o.ChangeRemark) {
		var ret string
		return ret
	}
	return *o.ChangeRemark
}

// GetChangeRemarkOk returns a tuple with the ChangeRemark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseTransportEventAllOf5) GetChangeRemarkOk() (*string, bool) {
	if o == nil || IsNil(o.ChangeRemark) {
		return nil, false
	}
	return o.ChangeRemark, true
}

// HasChangeRemark returns a boolean if a field has been set.
func (o *BaseTransportEventAllOf5) HasChangeRemark() bool {
	if o != nil && !IsNil(o.ChangeRemark) {
		return true
	}

	return false
}

// SetChangeRemark gets a reference to the given string and assigns it to the ChangeRemark field.
func (o *BaseTransportEventAllOf5) SetChangeRemark(v string) {
	o.ChangeRemark = &v
}

func (o BaseTransportEventAllOf5) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseTransportEventAllOf5) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChangeRemark) {
		toSerialize["changeRemark"] = o.ChangeRemark
	}
	return toSerialize, nil
}

type NullableBaseTransportEventAllOf5 struct {
	value *BaseTransportEventAllOf5
	isSet bool
}

func (v NullableBaseTransportEventAllOf5) Get() *BaseTransportEventAllOf5 {
	return v.value
}

func (v *NullableBaseTransportEventAllOf5) Set(val *BaseTransportEventAllOf5) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseTransportEventAllOf5) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseTransportEventAllOf5) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseTransportEventAllOf5(val *BaseTransportEventAllOf5) *NullableBaseTransportEventAllOf5 {
	return &NullableBaseTransportEventAllOf5{value: val, isSet: true}
}

func (v NullableBaseTransportEventAllOf5) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseTransportEventAllOf5) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
