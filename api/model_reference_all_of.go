/*
DCSA OpenAPI specification for Track & Trace

Provides equipment actual milestones along with Estimated Time of Arrival following DCSA standards

API version: 2.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the ReferenceAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReferenceAllOf{}

// ReferenceAllOf struct for ReferenceAllOf
type ReferenceAllOf struct {
	ReferenceType *ReferenceType `json:"referenceType,omitempty"`
}

// NewReferenceAllOf instantiates a new ReferenceAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReferenceAllOf() *ReferenceAllOf {
	this := ReferenceAllOf{}
	return &this
}

// NewReferenceAllOfWithDefaults instantiates a new ReferenceAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReferenceAllOfWithDefaults() *ReferenceAllOf {
	this := ReferenceAllOf{}
	return &this
}

// GetReferenceType returns the ReferenceType field value if set, zero value otherwise.
func (o *ReferenceAllOf) GetReferenceType() ReferenceType {
	if o == nil || IsNil(o.ReferenceType) {
		var ret ReferenceType
		return ret
	}
	return *o.ReferenceType
}

// GetReferenceTypeOk returns a tuple with the ReferenceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceAllOf) GetReferenceTypeOk() (*ReferenceType, bool) {
	if o == nil || IsNil(o.ReferenceType) {
		return nil, false
	}
	return o.ReferenceType, true
}

// HasReferenceType returns a boolean if a field has been set.
func (o *ReferenceAllOf) HasReferenceType() bool {
	if o != nil && !IsNil(o.ReferenceType) {
		return true
	}

	return false
}

// SetReferenceType gets a reference to the given ReferenceType and assigns it to the ReferenceType field.
func (o *ReferenceAllOf) SetReferenceType(v ReferenceType) {
	o.ReferenceType = &v
}

func (o ReferenceAllOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReferenceAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReferenceType) {
		toSerialize["referenceType"] = o.ReferenceType
	}
	return toSerialize, nil
}

type NullableReferenceAllOf struct {
	value *ReferenceAllOf
	isSet bool
}

func (v NullableReferenceAllOf) Get() *ReferenceAllOf {
	return v.value
}

func (v *NullableReferenceAllOf) Set(val *ReferenceAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableReferenceAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableReferenceAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReferenceAllOf(val *ReferenceAllOf) *NullableReferenceAllOf {
	return &NullableReferenceAllOf{value: val, isSet: true}
}

func (v NullableReferenceAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReferenceAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
