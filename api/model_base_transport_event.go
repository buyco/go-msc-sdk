/*
DCSA OpenAPI specification for Track & Trace

Provides equipment actual milestones along with Estimated Time of Arrival following DCSA standards

API version: 2.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the BaseTransportEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseTransportEvent{}

// BaseTransportEvent The transport event entity is a specialization of the event entity to support specification of data that only applies to a transport event.
type BaseTransportEvent struct {
	EventType *string `json:"eventType,omitempty"`
	// Code for the event classifier can be - ACT (Actual) - PLN (Planned) - EST (Estimated)
	EventClassifierCode    *string                `json:"eventClassifierCode,omitempty"`
	TransportEventTypeCode TransportEventTypeCode `json:"transportEventTypeCode"`
	// Reason code for the delay. The SMDG-Delay-Reason-Codes are used for this attribute. The code list can be found at http://www.smdg.org/smdg-code-lists/
	DelayReasonCode *string `json:"delayReasonCode,omitempty"`
	// Free text information provided by the vessel operator regarding the reasons for the change in schedule and/or plans to mitigate schedule slippage.  Deprecated - use changeRemark instead
	// Deprecated
	VesselScheduleChangeRemark *string `json:"vesselScheduleChangeRemark,omitempty"`
	// Free text information provided by the vessel operator regarding the reasons for the change in schedule and/or plans to mitigate schedule slippage.
	ChangeRemark    *string       `json:"changeRemark,omitempty"`
	TransportCallID *string       `json:"transportCallID,omitempty"`
	TransportCall   TransportCall `json:"transportCall"`
	// Unique identifier for Event Type Code, for transport events this is either - ARRI (Arrival) - DEPA (Departure)  Deprecated - use transportEventTypeCode instead
	// Deprecated
	EventTypeCode *string `json:"eventTypeCode,omitempty"`
}

// NewBaseTransportEvent instantiates a new BaseTransportEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseTransportEvent(transportEventTypeCode TransportEventTypeCode, transportCall TransportCall) *BaseTransportEvent {
	this := BaseTransportEvent{}
	this.TransportEventTypeCode = transportEventTypeCode
	this.TransportCall = transportCall
	return &this
}

// NewBaseTransportEventWithDefaults instantiates a new BaseTransportEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseTransportEventWithDefaults() *BaseTransportEvent {
	this := BaseTransportEvent{}
	return &this
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *BaseTransportEvent) GetEventType() string {
	if o == nil || IsNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseTransportEvent) GetEventTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *BaseTransportEvent) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *BaseTransportEvent) SetEventType(v string) {
	o.EventType = &v
}

// GetEventClassifierCode returns the EventClassifierCode field value if set, zero value otherwise.
func (o *BaseTransportEvent) GetEventClassifierCode() string {
	if o == nil || IsNil(o.EventClassifierCode) {
		var ret string
		return ret
	}
	return *o.EventClassifierCode
}

// GetEventClassifierCodeOk returns a tuple with the EventClassifierCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseTransportEvent) GetEventClassifierCodeOk() (*string, bool) {
	if o == nil || IsNil(o.EventClassifierCode) {
		return nil, false
	}
	return o.EventClassifierCode, true
}

// HasEventClassifierCode returns a boolean if a field has been set.
func (o *BaseTransportEvent) HasEventClassifierCode() bool {
	if o != nil && !IsNil(o.EventClassifierCode) {
		return true
	}

	return false
}

// SetEventClassifierCode gets a reference to the given string and assigns it to the EventClassifierCode field.
func (o *BaseTransportEvent) SetEventClassifierCode(v string) {
	o.EventClassifierCode = &v
}

// GetTransportEventTypeCode returns the TransportEventTypeCode field value
func (o *BaseTransportEvent) GetTransportEventTypeCode() TransportEventTypeCode {
	if o == nil {
		var ret TransportEventTypeCode
		return ret
	}

	return o.TransportEventTypeCode
}

// GetTransportEventTypeCodeOk returns a tuple with the TransportEventTypeCode field value
// and a boolean to check if the value has been set.
func (o *BaseTransportEvent) GetTransportEventTypeCodeOk() (*TransportEventTypeCode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransportEventTypeCode, true
}

// SetTransportEventTypeCode sets field value
func (o *BaseTransportEvent) SetTransportEventTypeCode(v TransportEventTypeCode) {
	o.TransportEventTypeCode = v
}

// GetDelayReasonCode returns the DelayReasonCode field value if set, zero value otherwise.
func (o *BaseTransportEvent) GetDelayReasonCode() string {
	if o == nil || IsNil(o.DelayReasonCode) {
		var ret string
		return ret
	}
	return *o.DelayReasonCode
}

// GetDelayReasonCodeOk returns a tuple with the DelayReasonCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseTransportEvent) GetDelayReasonCodeOk() (*string, bool) {
	if o == nil || IsNil(o.DelayReasonCode) {
		return nil, false
	}
	return o.DelayReasonCode, true
}

// HasDelayReasonCode returns a boolean if a field has been set.
func (o *BaseTransportEvent) HasDelayReasonCode() bool {
	if o != nil && !IsNil(o.DelayReasonCode) {
		return true
	}

	return false
}

// SetDelayReasonCode gets a reference to the given string and assigns it to the DelayReasonCode field.
func (o *BaseTransportEvent) SetDelayReasonCode(v string) {
	o.DelayReasonCode = &v
}

// GetVesselScheduleChangeRemark returns the VesselScheduleChangeRemark field value if set, zero value otherwise.
// Deprecated
func (o *BaseTransportEvent) GetVesselScheduleChangeRemark() string {
	if o == nil || IsNil(o.VesselScheduleChangeRemark) {
		var ret string
		return ret
	}
	return *o.VesselScheduleChangeRemark
}

// GetVesselScheduleChangeRemarkOk returns a tuple with the VesselScheduleChangeRemark field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *BaseTransportEvent) GetVesselScheduleChangeRemarkOk() (*string, bool) {
	if o == nil || IsNil(o.VesselScheduleChangeRemark) {
		return nil, false
	}
	return o.VesselScheduleChangeRemark, true
}

// HasVesselScheduleChangeRemark returns a boolean if a field has been set.
func (o *BaseTransportEvent) HasVesselScheduleChangeRemark() bool {
	if o != nil && !IsNil(o.VesselScheduleChangeRemark) {
		return true
	}

	return false
}

// SetVesselScheduleChangeRemark gets a reference to the given string and assigns it to the VesselScheduleChangeRemark field.
// Deprecated
func (o *BaseTransportEvent) SetVesselScheduleChangeRemark(v string) {
	o.VesselScheduleChangeRemark = &v
}

// GetChangeRemark returns the ChangeRemark field value if set, zero value otherwise.
func (o *BaseTransportEvent) GetChangeRemark() string {
	if o == nil || IsNil(o.ChangeRemark) {
		var ret string
		return ret
	}
	return *o.ChangeRemark
}

// GetChangeRemarkOk returns a tuple with the ChangeRemark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseTransportEvent) GetChangeRemarkOk() (*string, bool) {
	if o == nil || IsNil(o.ChangeRemark) {
		return nil, false
	}
	return o.ChangeRemark, true
}

// HasChangeRemark returns a boolean if a field has been set.
func (o *BaseTransportEvent) HasChangeRemark() bool {
	if o != nil && !IsNil(o.ChangeRemark) {
		return true
	}

	return false
}

// SetChangeRemark gets a reference to the given string and assigns it to the ChangeRemark field.
func (o *BaseTransportEvent) SetChangeRemark(v string) {
	o.ChangeRemark = &v
}

// GetTransportCallID returns the TransportCallID field value if set, zero value otherwise.
func (o *BaseTransportEvent) GetTransportCallID() string {
	if o == nil || IsNil(o.TransportCallID) {
		var ret string
		return ret
	}
	return *o.TransportCallID
}

// GetTransportCallIDOk returns a tuple with the TransportCallID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseTransportEvent) GetTransportCallIDOk() (*string, bool) {
	if o == nil || IsNil(o.TransportCallID) {
		return nil, false
	}
	return o.TransportCallID, true
}

// HasTransportCallID returns a boolean if a field has been set.
func (o *BaseTransportEvent) HasTransportCallID() bool {
	if o != nil && !IsNil(o.TransportCallID) {
		return true
	}

	return false
}

// SetTransportCallID gets a reference to the given string and assigns it to the TransportCallID field.
func (o *BaseTransportEvent) SetTransportCallID(v string) {
	o.TransportCallID = &v
}

// GetTransportCall returns the TransportCall field value
func (o *BaseTransportEvent) GetTransportCall() TransportCall {
	if o == nil {
		var ret TransportCall
		return ret
	}

	return o.TransportCall
}

// GetTransportCallOk returns a tuple with the TransportCall field value
// and a boolean to check if the value has been set.
func (o *BaseTransportEvent) GetTransportCallOk() (*TransportCall, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransportCall, true
}

// SetTransportCall sets field value
func (o *BaseTransportEvent) SetTransportCall(v TransportCall) {
	o.TransportCall = v
}

// GetEventTypeCode returns the EventTypeCode field value if set, zero value otherwise.
// Deprecated
func (o *BaseTransportEvent) GetEventTypeCode() string {
	if o == nil || IsNil(o.EventTypeCode) {
		var ret string
		return ret
	}
	return *o.EventTypeCode
}

// GetEventTypeCodeOk returns a tuple with the EventTypeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *BaseTransportEvent) GetEventTypeCodeOk() (*string, bool) {
	if o == nil || IsNil(o.EventTypeCode) {
		return nil, false
	}
	return o.EventTypeCode, true
}

// HasEventTypeCode returns a boolean if a field has been set.
func (o *BaseTransportEvent) HasEventTypeCode() bool {
	if o != nil && !IsNil(o.EventTypeCode) {
		return true
	}

	return false
}

// SetEventTypeCode gets a reference to the given string and assigns it to the EventTypeCode field.
// Deprecated
func (o *BaseTransportEvent) SetEventTypeCode(v string) {
	o.EventTypeCode = &v
}

func (o BaseTransportEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseTransportEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventType) {
		toSerialize["eventType"] = o.EventType
	}
	if !IsNil(o.EventClassifierCode) {
		toSerialize["eventClassifierCode"] = o.EventClassifierCode
	}
	toSerialize["transportEventTypeCode"] = o.TransportEventTypeCode
	if !IsNil(o.DelayReasonCode) {
		toSerialize["delayReasonCode"] = o.DelayReasonCode
	}
	if !IsNil(o.VesselScheduleChangeRemark) {
		toSerialize["vesselScheduleChangeRemark"] = o.VesselScheduleChangeRemark
	}
	if !IsNil(o.ChangeRemark) {
		toSerialize["changeRemark"] = o.ChangeRemark
	}
	if !IsNil(o.TransportCallID) {
		toSerialize["transportCallID"] = o.TransportCallID
	}
	toSerialize["transportCall"] = o.TransportCall
	if !IsNil(o.EventTypeCode) {
		toSerialize["eventTypeCode"] = o.EventTypeCode
	}
	return toSerialize, nil
}

type NullableBaseTransportEvent struct {
	value *BaseTransportEvent
	isSet bool
}

func (v NullableBaseTransportEvent) Get() *BaseTransportEvent {
	return v.value
}

func (v *NullableBaseTransportEvent) Set(val *BaseTransportEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseTransportEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseTransportEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseTransportEvent(val *BaseTransportEvent) *NullableBaseTransportEvent {
	return &NullableBaseTransportEvent{value: val, isSet: true}
}

func (v NullableBaseTransportEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseTransportEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
