/*
DCSA OpenAPI specification for Track & Trace

Provides equipment actual milestones along with Estimated Time of Arrival following DCSA standards

API version: 2.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the LocationAllOf2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocationAllOf2{}

// LocationAllOf2 struct for LocationAllOf2
type LocationAllOf2 struct {
	// Geographic coordinate that specifies the eastâ€“west position of a point on the Earth&apos;s surface.
	Longitude *string `json:"longitude,omitempty"`
}

// NewLocationAllOf2 instantiates a new LocationAllOf2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocationAllOf2() *LocationAllOf2 {
	this := LocationAllOf2{}
	return &this
}

// NewLocationAllOf2WithDefaults instantiates a new LocationAllOf2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationAllOf2WithDefaults() *LocationAllOf2 {
	this := LocationAllOf2{}
	return &this
}

// GetLongitude returns the Longitude field value if set, zero value otherwise.
func (o *LocationAllOf2) GetLongitude() string {
	if o == nil || IsNil(o.Longitude) {
		var ret string
		return ret
	}
	return *o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationAllOf2) GetLongitudeOk() (*string, bool) {
	if o == nil || IsNil(o.Longitude) {
		return nil, false
	}
	return o.Longitude, true
}

// HasLongitude returns a boolean if a field has been set.
func (o *LocationAllOf2) HasLongitude() bool {
	if o != nil && !IsNil(o.Longitude) {
		return true
	}

	return false
}

// SetLongitude gets a reference to the given string and assigns it to the Longitude field.
func (o *LocationAllOf2) SetLongitude(v string) {
	o.Longitude = &v
}

func (o LocationAllOf2) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocationAllOf2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Longitude) {
		toSerialize["longitude"] = o.Longitude
	}
	return toSerialize, nil
}

type NullableLocationAllOf2 struct {
	value *LocationAllOf2
	isSet bool
}

func (v NullableLocationAllOf2) Get() *LocationAllOf2 {
	return v.value
}

func (v *NullableLocationAllOf2) Set(val *LocationAllOf2) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationAllOf2) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationAllOf2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationAllOf2(val *LocationAllOf2) *NullableLocationAllOf2 {
	return &NullableLocationAllOf2{value: val, isSet: true}
}

func (v NullableLocationAllOf2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationAllOf2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
